
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 07 16:35:48 GMT-12:00 2018
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 07 16:35:48 GMT-12:00 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\007\011\000\002\007\011\000\002\007\011\000\002" +
    "\007\011\000\002\007\006\000\002\007\006\000\002\003" +
    "\007\000\002\004\005\000\002\004\003\000\002\005\003" +
    "\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\016\005\011\006\005\012\007\017\014\021" +
    "\013\022\004\001\002\000\004\006\066\001\002\000\012" +
    "\005\011\006\005\021\013\022\004\001\002\000\004\002" +
    "\000\001\002\000\004\006\033\001\002\000\014\002\uffff" +
    "\013\021\014\020\015\022\016\016\001\002\000\020\002" +
    "\ufff9\007\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9" +
    "\001\002\000\004\002\032\001\002\000\004\006\027\001" +
    "\002\000\012\005\011\006\005\021\013\022\004\001\002" +
    "\000\014\013\021\014\020\015\022\016\016\020\017\001" +
    "\002\000\012\005\011\006\005\021\013\022\004\001\002" +
    "\000\004\002\ufffe\001\002\000\012\005\011\006\005\021" +
    "\013\022\004\001\002\000\012\005\011\006\005\021\013" +
    "\022\004\001\002\000\012\005\011\006\005\021\013\022" +
    "\004\001\002\000\020\002\ufffa\007\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\020\ufffa\001\002\000\020\002\ufffd\007" +
    "\ufffd\013\ufffd\014\020\015\022\016\ufffd\020\ufffd\001\002" +
    "\000\020\002\ufffb\007\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\020\ufffb\001\002\000\020\002\ufffc\007\ufffc\013\ufffc" +
    "\014\020\015\022\016\ufffc\020\ufffc\001\002\000\012\005" +
    "\011\006\005\021\013\022\004\001\002\000\014\007\031" +
    "\013\021\014\020\015\022\016\016\001\002\000\020\002" +
    "\ufff4\007\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4" +
    "\001\002\000\004\002\001\001\002\000\006\004\035\005" +
    "\037\001\002\000\006\007\ufff0\010\ufff0\001\002\000\006" +
    "\007\uffef\010\uffef\001\002\000\006\007\041\010\040\001" +
    "\002\000\006\007\uffee\010\uffee\001\002\000\006\004\035" +
    "\005\037\001\002\000\004\011\042\001\002\000\004\002" +
    "\ufff2\001\002\000\006\007\ufff1\010\ufff1\001\002\000\014" +
    "\007\045\013\021\014\020\015\022\016\016\001\002\000" +
    "\012\013\050\014\047\015\051\016\046\001\002\000\004" +
    "\006\063\001\002\000\004\006\060\001\002\000\004\006" +
    "\055\001\002\000\004\006\052\001\002\000\012\005\011" +
    "\006\005\021\013\022\004\001\002\000\014\007\054\013" +
    "\021\014\020\015\022\016\016\001\002\000\020\002\ufff5" +
    "\007\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\001" +
    "\002\000\012\005\011\006\005\021\013\022\004\001\002" +
    "\000\014\007\057\013\021\014\020\015\022\016\016\001" +
    "\002\000\020\002\ufff8\007\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\020\ufff8\001\002\000\012\005\011\006\005\021" +
    "\013\022\004\001\002\000\014\007\062\013\021\014\020" +
    "\015\022\016\016\001\002\000\020\002\ufff6\007\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\001\002\000\012" +
    "\005\011\006\005\021\013\022\004\001\002\000\014\007" +
    "\065\013\021\014\020\015\022\016\016\001\002\000\020" +
    "\002\ufff7\007\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020" +
    "\ufff7\001\002\000\012\005\011\006\005\021\013\022\004" +
    "\001\002\000\014\007\070\013\021\014\020\015\022\016" +
    "\016\001\002\000\020\002\ufff3\007\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\020\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\010\002\011\003\005\007\007\001\001\000" +
    "\002\001\001\000\004\007\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\014\001\001" +
    "\000\002\001\001\000\004\007\025\001\001\000\002\001" +
    "\001\000\004\007\024\001\001\000\004\007\023\001\001" +
    "\000\004\007\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\035\005\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\066\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
        
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de usuario
        Integer posicion=1;
        Integer posicionInicial=0;
        Integer cantidad=0;
        boolean band=true;

    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // L ::= ENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                if(posicion==1)posicionInicial=Integer.parseInt(num);
                else if(posicion==2)cantidad=Integer.parseInt(num);
                
                if(posicionInicial<0)System.out.println("Invalido Posicion inicial negativa");
                if(cantidad<0)System.out.println("Invalido cantidad Negativa");

                else if((posicion-posicionInicial-1)>0 && cantidad>0 && band){
                    System.out.println(num);
                    cantidad--;
                }
                posicion++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // L ::= ID 
            {
              Object RESULT =null;
		int idileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                if((posicion-posicionInicial-1)>0 && cantidad>0 && band){
                    System.out.println(idi);
                    cantidad--;
                }
                posicion++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIST ::= L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LIST ::= LIST COMA L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= EXTRAER PAR_A LIST PAR_C PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPER ::= Tkn_Rq PAR_A OPER PAR_C 
            {
              String RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+Math.sqrt(Double.parseDouble(ot));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPER ::= Tkn_Ptn PAR_A OPER PAR_C 
            {
              String RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+Math.pow(Double.parseDouble(ot), 2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPER ::= PAR_A OPER PAR_C DIV PAR_A OPER PAR_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+(Float.parseFloat(a)/Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPER ::= PAR_A OPER PAR_C MUL PAR_A OPER PAR_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+(Float.parseFloat(a)*Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPER ::= PAR_A OPER PAR_C RES PAR_A OPER PAR_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+(Float.parseFloat(a)-Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPER ::= PAR_A OPER PAR_C SUMA PAR_A OPER PAR_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=""+(Float.parseFloat(a)+Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPER ::= ENTERO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPER ::= OPER DIV OPER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(Float.parseFloat(a)/Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPER ::= OPER MUL OPER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(Float.parseFloat(a)*Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPER ::= OPER RES OPER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(Float.parseFloat(a)-Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPER ::= OPER SUMA OPER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=""+(Float.parseFloat(a)+Float.parseFloat(b));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= LLA_A OPER LLA_C 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String so = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(so);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= OPER 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int soright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String so = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(so);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

