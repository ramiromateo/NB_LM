/* The following code was generated by JFlex 1.6.1 */

package analizadores;

import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>LexicoHTML.jflex</tt>
 */
public class LexicoHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANOTHERSTATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 44, 11, 45, 44, 44,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    44, 47,  5,  0, 13,  0, 48,  0,  8,  8, 47, 46, 12, 10,  4,  7, 
     3, 28, 29, 30,  3,  3,  3,  3,  3,  3, 12, 12,  6, 32,  9,  0, 
     0, 19, 21, 33, 20, 18, 37, 35, 14, 25, 38,  2, 17, 16, 36, 22, 
    27, 43, 31, 42, 15, 40, 26,  2, 34, 23, 39,  0,  0,  0,  0,  1, 
     0, 19, 21, 33, 20, 18, 37, 35, 14, 25, 38,  2, 17, 16, 36, 22, 
    27, 43, 31, 42, 15, 40, 26,  2, 34, 23, 39,  0, 49,  0,  0,  0, 
     0,  0,  0,  0,  0, 45,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\2\1\1"+
    "\5\2\1\5\1\6\2\2\25\7\1\0\1\10\11\0"+
    "\1\11\2\2\1\12\1\13\1\14\1\15\1\16\2\2"+
    "\1\17\1\0\1\2\1\20\1\2\1\0\2\2\1\21"+
    "\2\2\4\0\1\22\1\0\1\7\1\0\7\7\2\0"+
    "\1\7\17\0\4\2\1\0\1\2\1\0\1\2\2\23"+
    "\3\2\1\7\2\0\3\7\2\0\3\7\2\0\1\7"+
    "\26\0\1\24\1\25\1\26\2\2\1\0\1\2\1\0"+
    "\1\2\1\27\1\2\1\30\1\7\1\0\2\7\2\0"+
    "\3\7\16\0\1\31\1\32\1\33\1\34\1\0\1\35"+
    "\1\0\1\36\2\0\1\37\2\40\1\30\1\7\1\0"+
    "\5\7\5\0\1\41\3\0\1\42\1\0\1\43\4\0"+
    "\1\44\2\0\3\7\6\0\1\45\1\0\1\46\1\47"+
    "\2\0\1\50\1\0\2\7\1\51\5\0\1\52\1\53"+
    "\1\0\1\7\2\0\1\54\3\0\1\55\2\0\1\56"+
    "\1\0\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\144\0\144"+
    "\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\226\0\144"+
    "\0\u0258\0\u028a\0\144\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\144\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\144\0\u0898\0\u08ca\0\226\0\226\0\226"+
    "\0\226\0\226\0\u08fc\0\u092e\0\226\0\u0960\0\u0992\0\226"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\226\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0320\0\u0b22\0\u0b54\0\144\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\144\0\226\0\u128e\0\u12c0\0\u12f2\0\u0af0\0\u1324\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u047e\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\144\0\226\0\226\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\226\0\u1af4\0\226\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a"+
    "\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\144\0\144\0\144\0\144"+
    "\0\u1fa4\0\144\0\u1fd6\0\144\0\u2008\0\u203a\0\226\0\144"+
    "\0\226\0\144\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166"+
    "\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\144\0\u22c4"+
    "\0\u22f6\0\u2328\0\144\0\u235a\0\144\0\u238c\0\u23be\0\u23f0"+
    "\0\u2422\0\144\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\144\0\u267a\0\144"+
    "\0\144\0\u26ac\0\u26de\0\144\0\u2710\0\u2742\0\u2774\0\144"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\144\0\144\0\u2134"+
    "\0\u28a0\0\u28d2\0\u2904\0\144\0\u2936\0\u2968\0\u299a\0\144"+
    "\0\u29cc\0\u29fe\0\144\0\u2a30\0\144\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\3\4\1\5\1\6\2\3\1\7\1\3\1\10"+
    "\1\4\1\11\1\12\1\13\3\4\1\14\1\15\1\16"+
    "\2\4\1\3\2\4\1\17\4\4\1\20\1\21\3\4"+
    "\1\22\3\4\1\3\2\4\1\10\1\0\4\3\1\23"+
    "\2\24\1\25\1\23\1\26\1\27\2\23\1\30\1\31"+
    "\2\23\1\32\1\24\1\33\1\34\7\24\1\35\1\24"+
    "\1\36\1\37\3\25\1\40\1\30\1\41\3\24\1\42"+
    "\3\24\1\43\1\44\1\24\1\23\1\0\1\45\1\30"+
    "\1\46\1\47\64\0\3\4\7\0\1\4\1\0\12\4"+
    "\1\0\7\4\1\0\10\4\1\0\2\4\6\0\5\50"+
    "\1\51\12\50\1\52\2\50\1\53\1\54\3\50\2\55"+
    "\1\56\4\50\1\57\1\50\1\60\1\50\1\61\16\50"+
    "\7\0\1\62\67\0\1\63\46\0\3\4\7\0\1\4"+
    "\1\0\1\4\1\64\2\4\1\65\5\4\1\0\3\4"+
    "\1\66\1\67\1\70\1\71\1\0\10\4\1\0\2\4"+
    "\10\0\3\4\7\0\1\4\1\0\1\72\3\4\1\73"+
    "\1\74\1\75\3\4\1\76\1\77\5\4\1\100\1\0"+
    "\10\4\1\0\2\4\10\0\3\4\7\0\1\4\1\0"+
    "\3\4\1\101\6\4\1\0\7\4\1\0\10\4\1\0"+
    "\2\4\10\0\3\4\7\0\1\4\1\0\12\4\1\102"+
    "\1\103\6\4\1\0\10\4\1\0\2\4\10\0\3\4"+
    "\7\0\1\4\1\0\10\4\1\104\1\4\1\0\6\4"+
    "\1\105\1\0\10\4\1\0\2\4\10\0\3\4\7\0"+
    "\1\4\1\0\10\4\1\106\1\4\1\0\7\4\1\0"+
    "\10\4\1\0\2\4\10\0\3\4\7\0\1\4\1\0"+
    "\10\4\1\107\1\4\1\0\7\4\1\0\10\4\1\0"+
    "\2\4\7\0\3\24\12\0\12\24\1\0\7\24\1\0"+
    "\10\24\1\0\2\24\11\0\1\25\1\110\27\0\3\25"+
    "\23\0\5\111\1\23\54\111\7\0\1\112\30\0\1\23"+
    "\61\0\1\23\32\0\1\113\1\23\25\0\1\23\36\0"+
    "\1\114\45\0\3\24\12\0\12\24\1\115\7\24\1\0"+
    "\10\24\1\0\2\24\7\0\3\24\12\0\4\24\1\116"+
    "\5\24\1\0\7\24\1\0\10\24\1\0\2\24\52\0"+
    "\1\117\16\0\3\24\12\0\5\24\1\120\4\24\1\0"+
    "\7\24\1\0\10\24\1\0\2\24\7\0\3\24\12\0"+
    "\5\24\1\121\4\24\1\0\6\24\1\122\1\0\10\24"+
    "\1\0\2\24\7\0\3\24\12\0\4\24\1\123\5\24"+
    "\1\0\7\24\1\0\10\24\1\0\2\24\7\0\3\24"+
    "\12\0\3\24\1\124\4\24\1\125\1\24\1\0\7\24"+
    "\1\0\10\24\1\0\2\24\7\0\3\24\12\0\12\24"+
    "\1\0\7\24\1\0\7\24\1\126\1\0\2\24\25\0"+
    "\1\127\21\0\1\130\21\0\3\24\12\0\1\24\1\131"+
    "\10\24\1\0\7\24\1\0\10\24\1\0\2\24\46\0"+
    "\1\23\15\0\1\23\63\0\1\23\62\0\1\23\5\50"+
    "\1\51\61\50\1\51\20\50\1\132\40\50\1\51\12\50"+
    "\1\133\23\50\1\134\2\50\1\135\17\50\1\51\14\50"+
    "\1\136\44\50\1\51\41\50\1\137\17\50\1\51\14\50"+
    "\1\140\44\50\1\51\20\50\1\141\40\50\1\51\14\50"+
    "\1\142\44\50\1\51\31\50\1\143\22\50\16\0\1\144"+
    "\1\145\4\0\1\146\1\147\5\0\1\150\30\0\3\4"+
    "\7\0\1\4\1\0\2\4\1\151\7\4\1\0\7\4"+
    "\1\0\10\4\1\0\2\4\10\0\3\4\7\0\1\4"+
    "\1\0\5\4\1\152\4\4\1\0\7\4\1\0\10\4"+
    "\1\0\2\4\10\0\3\4\7\0\1\4\1\0\12\4"+
    "\1\0\7\4\1\0\1\4\1\153\6\4\1\0\2\4"+
    "\10\0\3\4\7\0\1\4\1\0\7\4\1\154\2\4"+
    "\1\0\7\4\1\0\10\4\1\0\2\4\25\0\1\155"+
    "\44\0\3\4\7\0\1\4\1\0\1\4\1\156\10\4"+
    "\1\0\7\4\1\0\10\4\1\0\2\4\10\0\3\4"+
    "\7\0\1\4\1\0\12\4\1\157\1\160\6\4\1\0"+
    "\10\4\1\0\2\4\40\0\1\161\31\0\3\4\7\0"+
    "\1\4\1\0\12\4\1\0\1\4\1\162\5\4\1\0"+
    "\10\4\1\0\2\4\10\0\3\4\7\0\1\4\1\0"+
    "\6\4\1\163\3\4\1\0\7\4\1\0\10\4\1\0"+
    "\2\4\10\0\3\4\7\0\1\4\1\0\3\4\1\164"+
    "\6\4\1\0\7\4\1\0\10\4\1\0\2\4\10\0"+
    "\3\4\7\0\1\4\1\0\12\4\1\0\7\4\1\0"+
    "\3\4\1\165\4\4\1\0\2\4\11\0\1\166\30\0"+
    "\3\166\23\0\7\112\1\167\2\0\50\112\13\113\1\23"+
    "\46\113\33\0\1\170\27\0\3\24\12\0\1\24\1\171"+
    "\10\24\1\0\7\24\1\0\10\24\1\0\2\24\25\0"+
    "\1\23\43\0\3\24\12\0\12\24\1\0\6\24\1\172"+
    "\1\0\10\24\1\0\2\24\7\0\3\24\12\0\12\24"+
    "\1\0\6\24\1\173\1\0\10\24\1\0\2\24\7\0"+
    "\3\24\12\0\12\24\1\174\7\24\1\0\10\24\1\0"+
    "\2\24\7\0\3\24\12\0\12\24\1\0\7\24\1\0"+
    "\10\24\1\175\2\24\7\0\3\24\12\0\5\24\1\176"+
    "\4\24\1\0\7\24\1\0\10\24\1\0\2\24\7\0"+
    "\3\24\12\0\2\24\1\177\7\24\1\0\7\24\1\0"+
    "\10\24\1\0\2\24\7\0\3\24\12\0\12\24\1\0"+
    "\7\24\1\0\3\24\1\200\4\24\1\0\2\24\45\0"+
    "\1\201\50\0\1\202\34\0\3\24\12\0\12\24\1\0"+
    "\6\24\1\203\1\0\10\24\1\0\2\24\6\0\5\50"+
    "\1\51\31\50\1\204\27\50\1\51\15\50\1\205\43\50"+
    "\1\51\15\50\1\206\43\50\1\51\42\50\1\207\16\50"+
    "\1\51\31\50\1\210\27\50\1\51\45\50\1\211\13\50"+
    "\1\51\31\50\1\212\27\50\1\51\40\50\1\213\20\50"+
    "\1\51\36\50\1\214\22\50\1\51\22\50\2\215\30\50"+
    "\17\0\1\216\2\0\1\217\11\0\1\220\1\221\1\222"+
    "\41\0\1\223\4\0\1\224\1\225\3\0\2\226\5\0"+
    "\1\227\52\0\2\230\56\0\1\231\44\0\1\232\52\0"+
    "\3\4\7\0\1\4\1\0\3\4\1\233\6\4\1\0"+
    "\7\4\1\0\10\4\1\0\2\4\10\0\3\4\7\0"+
    "\1\4\1\0\6\4\1\234\3\4\1\0\7\4\1\0"+
    "\10\4\1\0\2\4\10\0\3\4\7\0\1\4\1\0"+
    "\1\4\1\235\10\4\1\0\7\4\1\0\10\4\1\0"+
    "\2\4\10\0\3\4\7\0\1\4\1\0\3\4\1\236"+
    "\6\4\1\0\7\4\1\0\10\4\1\0\2\4\27\0"+
    "\1\237\42\0\3\4\7\0\1\4\1\0\3\4\1\240"+
    "\6\4\1\0\7\4\1\0\10\4\1\0\2\4\51\0"+
    "\1\241\20\0\3\4\7\0\1\4\1\0\12\4\1\0"+
    "\7\4\1\0\2\4\1\242\5\4\1\0\2\4\10\0"+
    "\3\4\7\0\1\4\1\0\11\4\1\243\1\0\7\4"+
    "\1\0\10\4\1\0\2\4\10\0\3\4\7\0\1\4"+
    "\1\0\10\4\1\244\1\4\1\0\7\4\1\0\10\4"+
    "\1\0\2\4\10\0\3\4\7\0\1\4\1\0\1\4"+
    "\1\245\10\4\1\0\7\4\1\0\10\4\1\0\2\4"+
    "\17\0\1\23\76\0\1\23\34\0\3\24\12\0\10\24"+
    "\1\246\1\24\1\0\7\24\1\0\10\24\1\0\2\24"+
    "\7\0\3\24\12\0\12\24\1\247\1\250\6\24\1\0"+
    "\10\24\1\0\2\24\7\0\3\24\12\0\5\24\1\251"+
    "\4\24\1\0\7\24\1\0\10\24\1\0\2\24\56\0"+
    "\1\252\12\0\3\24\12\0\12\24\1\0\7\24\1\0"+
    "\10\24\1\253\1\254\1\24\7\0\3\24\12\0\4\24"+
    "\1\255\5\24\1\0\7\24\1\0\10\24\1\0\2\24"+
    "\7\0\3\24\12\0\12\24\1\0\7\24\1\0\1\256"+
    "\7\24\1\0\2\24\36\0\2\257\67\0\1\260\23\0"+
    "\3\24\12\0\12\24\1\257\7\24\1\0\10\24\1\0"+
    "\2\24\6\0\5\50\1\51\15\50\1\261\43\50\1\51"+
    "\31\50\1\262\27\50\1\51\31\50\1\263\27\50\1\51"+
    "\13\50\1\264\45\50\1\51\14\50\1\265\44\50\1\51"+
    "\42\50\1\266\16\50\1\51\16\50\1\267\42\50\1\51"+
    "\20\50\1\270\40\50\1\51\11\50\1\271\47\50\1\51"+
    "\43\50\2\272\7\50\20\0\1\273\64\0\1\274\47\0"+
    "\1\275\61\0\1\276\61\0\1\277\61\0\1\300\75\0"+
    "\1\301\45\0\1\302\67\0\1\303\53\0\1\304\102\0"+
    "\1\305\53\0\1\306\37\0\3\4\7\0\1\4\1\0"+
    "\12\4\1\0\7\4\1\0\1\21\7\4\1\0\2\4"+
    "\10\0\3\4\7\0\1\4\1\0\4\4\1\307\5\4"+
    "\1\0\7\4\1\0\10\4\1\0\2\4\30\0\1\310"+
    "\41\0\3\4\7\0\1\4\1\0\4\4\1\311\5\4"+
    "\1\0\7\4\1\0\10\4\1\0\2\4\52\0\1\312"+
    "\17\0\3\4\7\0\1\4\1\0\12\4\1\0\7\4"+
    "\1\0\3\4\1\245\4\4\1\0\2\4\10\0\3\4"+
    "\7\0\1\4\1\0\12\4\1\0\6\4\1\245\1\0"+
    "\10\4\1\0\2\4\7\0\3\24\12\0\6\24\1\313"+
    "\3\24\1\0\7\24\1\0\10\24\1\0\2\24\31\0"+
    "\1\314\37\0\3\24\12\0\5\24\1\315\4\24\1\0"+
    "\7\24\1\0\10\24\1\0\2\24\7\0\3\24\12\0"+
    "\2\24\1\316\7\24\1\0\7\24\1\0\10\24\1\0"+
    "\2\24\27\0\1\117\62\0\1\317\40\0\3\24\12\0"+
    "\4\24\1\320\5\24\1\0\7\24\1\0\10\24\1\0"+
    "\2\24\7\0\3\24\12\0\12\24\1\0\7\24\1\0"+
    "\3\24\1\321\4\24\1\0\2\24\7\0\3\24\12\0"+
    "\12\24\1\322\7\24\1\0\10\24\1\0\2\24\52\0"+
    "\1\323\37\0\1\23\37\0\5\50\1\51\16\50\1\324"+
    "\42\50\1\51\22\50\2\325\35\50\1\51\15\50\1\326"+
    "\43\50\1\327\61\50\1\51\33\50\1\330\25\50\1\51"+
    "\22\50\2\331\35\50\1\51\14\50\1\332\44\50\1\333"+
    "\61\50\1\51\31\50\1\334\27\50\1\335\54\50\21\0"+
    "\1\336\64\0\1\337\56\0\1\340\61\0\1\341\51\0"+
    "\1\342\77\0\1\343\33\0\3\24\12\0\10\24\1\320"+
    "\1\24\1\0\7\24\1\0\10\24\1\0\2\24\33\0"+
    "\1\344\35\0\3\24\12\0\7\24\1\345\2\24\1\0"+
    "\7\24\1\0\10\24\1\0\2\24\7\0\3\24\12\0"+
    "\4\24\1\346\5\24\1\0\7\24\1\0\10\24\1\0"+
    "\2\24\57\0\2\23\10\0\3\24\12\0\12\24\1\0"+
    "\7\24\1\0\10\24\1\23\2\24\7\0\3\24\12\0"+
    "\1\24\1\347\10\24\1\0\7\24\1\0\10\24\1\0"+
    "\2\24\34\0\1\350\76\0\1\23\16\0\5\50\1\51"+
    "\20\50\1\351\40\50\1\51\13\50\1\352\45\50\1\51"+
    "\36\50\1\353\22\50\1\51\10\50\1\354\50\50\1\51"+
    "\14\50\1\355\44\50\1\356\61\50\1\51\15\50\1\357"+
    "\36\50\11\0\1\360\61\0\1\361\72\0\1\362\61\0"+
    "\1\363\50\0\1\364\71\0\1\365\41\0\3\24\12\0"+
    "\3\24\1\254\6\24\1\0\7\24\1\0\10\24\1\0"+
    "\2\24\7\0\3\24\12\0\1\24\1\366\10\24\1\0"+
    "\7\24\1\0\10\24\1\0\2\24\7\0\3\24\12\0"+
    "\5\24\1\367\4\24\1\0\7\24\1\0\10\24\1\0"+
    "\2\24\52\0\1\23\15\0\5\50\1\370\61\50\1\51"+
    "\13\50\1\371\45\50\1\51\40\50\1\372\20\50\1\51"+
    "\15\50\1\373\43\50\1\51\31\50\1\374\27\50\1\51"+
    "\16\50\1\375\35\50\11\0\1\376\61\0\1\377\72\0"+
    "\1\u0100\40\0\3\24\12\0\12\24\1\0\6\24\1\313"+
    "\1\0\10\24\1\0\2\24\7\0\3\24\12\0\12\24"+
    "\1\0\6\24\1\u0101\1\0\10\24\1\0\2\24\6\0"+
    "\5\50\1\51\20\50\1\u0102\40\50\1\51\15\50\1\u0103"+
    "\43\50\1\u0104\61\50\1\51\16\50\1\u0105\42\50\1\51"+
    "\20\50\1\u0106\33\50\1\0\3\24\12\0\12\24\1\u0107"+
    "\1\313\6\24\1\0\10\24\1\0\2\24\6\0\5\50"+
    "\1\u0108\61\50\1\51\16\50\1\u0109\42\50\1\51\15\50"+
    "\1\u010a\43\50\1\u010b\54\50\26\0\1\u0100\33\0\5\50"+
    "\1\51\20\50\1\u010c\40\50\1\u010d\61\50\1\u010e\54\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\2\11\7\1\1\11\2\1\1\11"+
    "\24\1\1\0\1\11\11\0\1\11\12\1\1\0\3\1"+
    "\1\0\5\1\4\0\1\11\1\0\1\1\1\0\7\1"+
    "\2\0\1\1\17\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\11\5\1\2\0\3\1\2\0\3\1\2\0\1\1"+
    "\26\0\1\11\4\1\1\0\1\1\1\0\5\1\1\0"+
    "\2\1\2\0\3\1\16\0\4\11\1\0\1\11\1\0"+
    "\1\11\2\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\5\1\5\0\1\11\3\0\1\11\1\0\1\11\4\0"+
    "\1\11\2\0\3\1\6\0\1\11\1\0\2\11\2\0"+
    "\1\11\1\0\2\1\1\11\5\0\2\11\1\0\1\1"+
    "\2\0\1\11\3\0\1\11\2\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String text = "";
    int contador = 0;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoHTML(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosHTML.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error: " + yytext());
            }
          case 49: break;
          case 2: 
            { text += yytext();
            }
          case 50: break;
          case 3: 
            { text += yytext();  return new Symbol(SimbolosHTML.abre, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 4: 
            { text += yytext();  return new Symbol(SimbolosHTML.cierra, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 5: 
            { text += yytext();  return new Symbol(SimbolosHTML.p, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 6: 
            { text += yytext();  return new Symbol(SimbolosHTML.igual, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 7: 
            { 
            }
          case 55: break;
          case 8: 
            { text += yytext();  return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 9: 
            { text += "break_"; yybegin(ANOTHERSTATE);
            }
          case 57: break;
          case 10: 
            { text += yytext();  return new Symbol(SimbolosHTML.h1, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 11: 
            { text += yytext();  return new Symbol(SimbolosHTML.h2, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 12: 
            { text += yytext();  return new Symbol(SimbolosHTML.h3, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 13: 
            { text += yytext();  return new Symbol(SimbolosHTML.hr, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 14: 
            { text += yytext();  return new Symbol(SimbolosHTML.th, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 15: 
            { text += yytext();  return new Symbol(SimbolosHTML.td, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 16: 
            { text += yytext();  return new Symbol(SimbolosHTML.tr, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 17: 
            { text += yytext();  return new Symbol(SimbolosHTML.br, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 18: 
            { text += "point" + contador; contador++; yybegin(YYINITIAL);
            }
          case 66: break;
          case 19: 
            { text += yytext();  return new Symbol(SimbolosHTML.div, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 20: 
            { text += yytext(); return new Symbol(SimbolosHTML.finp, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 21: 
            { text += yytext();  return new Symbol(SimbolosHTML.html, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 22: 
            { text += yytext();  return new Symbol(SimbolosHTML.head, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 23: 
            { text += yytext();  return new Symbol(SimbolosHTML.body, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 24: 
            { text += yytext();  return new Symbol(SimbolosHTML.atributo, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 25: 
            { text += yytext(); return new Symbol(SimbolosHTML.finh1, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 26: 
            { text += yytext(); return new Symbol(SimbolosHTML.finh2, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 27: 
            { text += yytext(); return new Symbol(SimbolosHTML.finh3, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 28: 
            { text += yytext(); return new Symbol(SimbolosHTML.finth, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 29: 
            { text += yytext(); return new Symbol(SimbolosHTML.fintd, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 30: 
            { text += yytext(); return new Symbol(SimbolosHTML.fintr, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 31: 
            { text += yytext();  return new Symbol(SimbolosHTML.table, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 32: 
            { text += yytext();  return new Symbol(SimbolosHTML.title, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 33: 
            { text += "\"blue\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 34: 
            { text += "\"red\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 35: 
            { text += "\"gray\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 36: 
            { text += yytext(); return new Symbol(SimbolosHTML.findiv, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 37: 
            { text += "\"green\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 38: 
            { text += yytext(); return new Symbol(SimbolosHTML.finhtml, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 39: 
            { text += yytext(); return new Symbol(SimbolosHTML.finhead, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 40: 
            { text += yytext(); return new Symbol(SimbolosHTML.finbody, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 41: 
            { text += "\"purple\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 42: 
            { text += yytext(); return new Symbol(SimbolosHTML.fintable, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 43: 
            { text += yytext(); return new Symbol(SimbolosHTML.fintitle, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 44: 
            { text += "\"right\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 45: 
            { text += "\"yellow\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 46: 
            { text += "\"center\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 47: 
            { text += "\"left\"";  return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 48: 
            { text += "\"orange\""; return new Symbol(SimbolosHTML.valor, yycolumn, yyline, yytext());
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
