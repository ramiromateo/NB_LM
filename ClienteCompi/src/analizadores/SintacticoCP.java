
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import clientecompi.Juanson;
import estructuras.Lista;
import java_cup.runtime.Symbol;
import javax.swing.JTextArea;
import semantico.Expresion;

import semantico.Simbolo;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoCP extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosCP.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoCP() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoCP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\002\000\002\003" +
    "\003\000\002\003\004\000\002\004\006\000\002\004\005" +
    "\000\002\005\005\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\010\004\000\002\010" +
    "\003\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\004\000\002\015\003\000\002\015" +
    "\003\000\002\016\006\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\004\000\002\017\003\000\002\017" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\004\000\002\020\003\000\002\021\005\000\002\022" +
    "\003\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\004\004\007\001\002\000\004\004" +
    "\007\001\002\000\004\002\165\001\002\000\006\002\uffff" +
    "\004\162\001\002\000\022\003\023\022\022\023\020\024" +
    "\026\025\017\026\015\052\013\053\010\001\002\000\004" +
    "\035\157\001\002\000\004\064\ufff6\001\002\000\024\003" +
    "\023\005\154\022\022\023\020\024\026\025\017\026\015" +
    "\052\013\053\010\001\002\000\016\050\145\051\150\054" +
    "\147\055\144\056\152\057\146\001\002\000\004\064\ufff8" +
    "\001\002\000\004\052\ufff0\001\002\000\004\064\ufff7\001" +
    "\002\000\004\052\uffee\001\002\000\004\052\uffef\001\002" +
    "\000\004\052\030\001\002\000\004\052\uffec\001\002\000" +
    "\004\064\ufff5\001\002\000\004\064\027\001\002\000\004" +
    "\064\ufff9\001\002\000\004\052\uffed\001\002\000\024\003" +
    "\ufffa\005\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\052\ufffa\053\ufffa\001\002\000\006\057\031\064\000\001" +
    "\002\000\024\006\047\027\045\031\041\035\034\041\044" +
    "\052\036\062\040\065\042\066\043\001\002\000\004\064" +
    "\ufff2\001\002\000\004\064\ufff4\001\002\000\024\006\047" +
    "\027\045\031\041\035\034\041\044\052\036\062\040\065" +
    "\042\066\043\001\002\000\010\060\073\061\075\064\ufff3" +
    "\001\002\000\042\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\060\uffdb\061\uffdb\064\uffdb\001\002\000" +
    "\042\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\037\uffd9" +
    "\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\060\uffd9\061\uffd9\064\uffd9\001\002\000\024\006\047" +
    "\027\045\031\041\035\034\041\044\052\036\062\040\065" +
    "\042\066\043\001\002\000\020\006\047\031\041\035\034" +
    "\041\044\052\036\065\042\066\043\001\002\000\042\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\037\uffde\040\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\060" +
    "\uffde\061\uffde\064\uffde\001\002\000\042\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\037\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\060\uffdd\061\uffdd" +
    "\064\uffdd\001\002\000\042\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\060\uffdc\061\uffdc\064\uffdc\001" +
    "\002\000\014\037\uffcd\040\uffcd\060\uffcd\061\uffcd\064\uffcd" +
    "\001\002\000\042\030\123\031\114\032\111\033\117\034" +
    "\116\037\uffcf\040\uffcf\042\115\043\122\044\120\045\113" +
    "\046\121\047\112\060\uffcf\061\uffcf\064\uffcf\001\002\000" +
    "\004\063\050\001\002\000\014\007\055\010\054\011\056" +
    "\012\053\013\052\001\002\000\042\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\037\uffcc\040\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\060\uffcc\061\uffcc\064" +
    "\uffcc\001\002\000\006\036\060\063\000\001\002\000\006" +
    "\036\060\063\000\001\002\000\006\036\060\063\000\001" +
    "\002\000\042\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\060\uffcb\061\uffcb\064\uffcb\001\002\000\006" +
    "\036\060\063\000\001\002\000\004\063\uffbf\001\002\000" +
    "\024\006\047\027\045\031\041\035\034\041\044\052\036" +
    "\062\040\065\042\066\043\001\002\000\004\063\062\001" +
    "\002\000\016\014\070\015\066\016\067\017\071\020\065" +
    "\021\063\001\002\000\042\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\060\uffc1\061\uffc1\064\uffc1\001" +
    "\002\000\042\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\037\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\060\uffc9\061\uffc9\064\uffc9\001\002\000\042" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\037\uffc2\040" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\060\uffc2\061\uffc2\064\uffc2\001\002\000\042\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\037\uffc5\040\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\060\uffc5\061" +
    "\uffc5\064\uffc5\001\002\000\042\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\060\uffc4\061\uffc4\064\uffc4" +
    "\001\002\000\042\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\060\uffc6\061\uffc6\064\uffc6\001\002\000" +
    "\042\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\037\uffc3" +
    "\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\060\uffc3\061\uffc3\064\uffc3\001\002\000\010\040\074" +
    "\060\073\061\075\001\002\000\024\006\047\027\045\031" +
    "\041\035\034\041\044\052\036\062\040\065\042\066\043" +
    "\001\002\000\004\063\uffc0\001\002\000\024\006\047\027" +
    "\045\031\041\035\034\041\044\052\036\062\040\065\042" +
    "\066\043\001\002\000\014\037\uffd6\040\uffd6\060\073\061" +
    "\uffd6\064\uffd6\001\002\000\014\037\uffd7\040\uffd7\060\uffd7" +
    "\061\uffd7\064\uffd7\001\002\000\004\063\101\001\002\000" +
    "\016\014\070\015\066\016\067\017\071\020\065\021\063" +
    "\001\002\000\042\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\060\uffca\061\uffca\064\uffca\001\002\000" +
    "\004\063\104\001\002\000\016\014\070\015\066\016\067" +
    "\017\071\020\065\021\063\001\002\000\042\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\037\uffc8\040\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\060\uffc8\061" +
    "\uffc8\064\uffc8\001\002\000\004\063\107\001\002\000\016" +
    "\014\070\015\066\016\067\017\071\020\065\021\063\001" +
    "\002\000\042\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\060\uffc7\061\uffc7\064\uffc7\001\002\000\020" +
    "\006\047\031\041\035\034\041\044\052\036\065\042\066" +
    "\043\001\002\000\020\006\047\031\041\035\034\041\044" +
    "\052\036\065\042\066\043\001\002\000\020\006\047\031" +
    "\041\035\034\041\044\052\036\065\042\066\043\001\002" +
    "\000\020\006\047\031\041\035\034\041\044\052\036\065" +
    "\042\066\043\001\002\000\020\006\047\031\041\035\034" +
    "\041\044\052\036\065\042\066\043\001\002\000\020\006" +
    "\047\031\041\035\034\041\044\052\036\065\042\066\043" +
    "\001\002\000\020\006\047\031\041\035\034\041\044\052" +
    "\036\065\042\066\043\001\002\000\020\006\047\031\041" +
    "\035\034\041\044\052\036\065\042\066\043\001\002\000" +
    "\020\006\047\031\041\035\034\041\044\052\036\065\042" +
    "\066\043\001\002\000\020\006\047\031\041\035\034\041" +
    "\044\052\036\065\042\066\043\001\002\000\020\006\047" +
    "\031\041\035\034\041\044\052\036\065\042\066\043\001" +
    "\002\000\042\030\uffdf\031\uffdf\032\111\033\117\034\116" +
    "\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\060\uffdf\061\uffdf\064\uffdf\001\002\000\026" +
    "\030\123\031\114\032\111\033\117\034\116\037\uffd4\040" +
    "\uffd4\060\uffd4\061\uffd4\064\uffd4\001\002\000\026\030\123" +
    "\031\114\032\111\033\117\034\116\037\uffd1\040\uffd1\060" +
    "\uffd1\061\uffd1\064\uffd1\001\002\000\026\030\123\031\114" +
    "\032\111\033\117\034\116\037\uffd3\040\uffd3\060\uffd3\061" +
    "\uffd3\064\uffd3\001\002\000\042\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\060\uffe2\061\uffe2\064\uffe2" +
    "\001\002\000\042\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\060\uffe3\061\uffe3\064\uffe3\001\002\000" +
    "\026\030\123\031\114\032\111\033\117\034\116\037\uffd5" +
    "\040\uffd5\060\uffd5\061\uffd5\064\uffd5\001\002\000\042\030" +
    "\uffe0\031\uffe0\032\111\033\117\034\116\037\uffe0\040\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\060" +
    "\uffe0\061\uffe0\064\uffe0\001\002\000\026\030\123\031\114" +
    "\032\111\033\117\034\116\037\uffd2\040\uffd2\060\uffd2\061" +
    "\uffd2\064\uffd2\001\002\000\026\030\123\031\114\032\111" +
    "\033\117\034\116\037\uffd0\040\uffd0\060\uffd0\061\uffd0\064" +
    "\uffd0\001\002\000\042\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\060\uffe1\061\uffe1\064\uffe1\001\002" +
    "\000\042\030\uffda\031\uffda\032\111\033\117\034\116\037" +
    "\uffda\040\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\060\uffda\061\uffda\064\uffda\001\002\000\014\037" +
    "\uffce\040\uffce\060\uffce\061\uffce\064\uffce\001\002\000\010" +
    "\037\142\060\073\061\075\001\002\000\042\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\040\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\060\uffd8\061" +
    "\uffd8\064\uffd8\001\002\000\024\006\047\027\045\031\041" +
    "\035\034\041\044\052\036\062\040\065\042\066\043\001" +
    "\002\000\024\006\uffe9\027\uffe9\031\uffe9\035\uffe9\041\uffe9" +
    "\052\uffe9\062\uffe9\065\uffe9\066\uffe9\001\002\000\004\064" +
    "\uffe6\001\002\000\024\006\uffeb\027\uffeb\031\uffeb\035\uffeb" +
    "\041\uffeb\052\uffeb\062\uffeb\065\uffeb\066\uffeb\001\002\000" +
    "\024\006\uffea\027\uffea\031\uffea\035\uffea\041\uffea\052\uffea" +
    "\062\uffea\065\uffea\066\uffea\001\002\000\004\064\uffe5\001" +
    "\002\000\004\064\uffe7\001\002\000\024\006\uffe8\027\uffe8" +
    "\031\uffe8\035\uffe8\041\uffe8\052\uffe8\062\uffe8\065\uffe8\066" +
    "\uffe8\001\002\000\010\060\073\061\075\064\ufff1\001\002" +
    "\000\006\002\ufffc\004\ufffc\001\002\000\004\064\156\001" +
    "\002\000\024\003\ufffb\005\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\052\ufffb\053\ufffb\001\002\000\024\006" +
    "\047\027\045\031\041\035\034\041\044\052\036\062\040" +
    "\065\042\066\043\001\002\000\010\037\161\060\073\061" +
    "\075\001\002\000\004\064\uffe4\001\002\000\022\003\023" +
    "\022\022\023\020\024\026\025\017\026\015\052\013\053" +
    "\010\001\002\000\024\003\023\005\164\022\022\023\020" +
    "\024\026\025\017\026\015\052\013\053\010\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffe\004\162\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\004\004\005\001\001\000\004\004" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\011\006\023\007\013\011\024\012\020\014\010\016" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\154\007\013\011\024\012\020\014\010\016\015\001" +
    "\001\000\006\013\142\015\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\031\010\032\001\001" +
    "\000\010\017\045\020\034\021\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\045\020\140\021\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\045\020\137\021\036\001\001\000\006" +
    "\017\136\021\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\050\001\001\000\002\001" +
    "\001\000\006\002\056\024\105\001\001\000\006\002\056" +
    "\024\102\001\001\000\006\002\056\024\077\001\001\000" +
    "\002\001\001\000\006\002\056\024\060\001\001\000\002" +
    "\001\001\000\010\017\045\020\071\021\036\001\001\000" +
    "\002\001\001\000\004\023\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\045\020\076\021\036\001\001\000" +
    "\002\001\001\000\010\017\045\020\075\021\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\107\001\001\000\002\001\001\000\006" +
    "\017\135\021\036\001\001\000\006\017\134\021\036\001" +
    "\001\000\006\017\133\021\036\001\001\000\006\017\132" +
    "\021\036\001\001\000\006\017\131\021\036\001\001\000" +
    "\006\017\130\021\036\001\001\000\006\017\127\021\036" +
    "\001\001\000\006\017\126\021\036\001\001\000\006\017" +
    "\125\021\036\001\001\000\006\017\124\021\036\001\001" +
    "\000\006\017\123\021\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\045\020\152\021\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\045\020\157\021\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\162\006\023\007\013\011\024\012\020\014\010\016\015" +
    "\001\001\000\016\006\154\007\013\011\024\012\020\014" +
    "\010\016\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s != null && s.value !=null){
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            consola.append("\nError Sintactico: " + lexema + " en Fila: " + fila + " Columna: " + columna);

        }else {
            System.out.println("Error Sintactico");
        }
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
      if(s != null && s.value !=null){
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
          	consola.append("\nError Sintactico: " + lexema + " en Fila: " + fila + " Columna: " + columna);
                
        }else {
            System.out.println("Error Sintactico");
        }
    }

    String clasificacion = "";
    int index = 0;
    String atributo = "";
    String currentType = "";
    boolean scr = false;
    public JTextArea consola;
    public Juanson objetoJson;
    Lista<Simbolo> tablaDeSimbolos = new Lista();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoCP$actions {


    private int obtenerIndice(Object obj, int fila){
        Expresion exp = (Expresion)obj;
        if(exp.getTipo().equals("entero")){
            return Integer.parseInt(exp.getValor().toString());
        }
        consola.append("\nError Semántico en fila: " + fila + 
            "\nEl indice del array debe ser entero" );
        return -1;

    }

    private Expresion obtenerResult(String clasificacion, int index, String atributo, boolean score, int fila){
        if(index != -1){
            if(score){
                double sc =10.5;
                return new Expresion("decimal", ""+sc , fila);
            }
            String valor = "";
            if(valor.startsWith("ERROR")){
                consola.append("\nError Semántico en fila: " + fila + 
                    "\nLos atributos buscados no existen" );
                return new Expresion("ERROR", 0, fila);
            }
            else {
                return new Expresion("cadena", valor, fila);
            }

        }
        return new Expresion("ERROR", 0, fila);
    }

    private Expresion obtenerValor(String identificador) {
        Simbolo nuevo = tablaDeSimbolos.getObjeto(identificador);
        if(nuevo != null){
            Expresion exp = nuevo.getExp();
            return exp;
        }
        consola.append("\nError Semántico: el símbolo " + identificador +
            "no existe.");
        return new Expresion("ERROR", 0, 0);

    }

    private void ingresarSimbolo(String tipo, String nombre, Object valor, int fila){
        Expresion var = (Expresion)valor;
        if(tablaDeSimbolos.pertenece(nombre)){
            consola.append("\nError Sémantico: la variable " + nombre + " ya existe.");
                    tablaDeSimbolos.insertar(new Simbolo(tipo, nombre, 0, "NULO"));
        } else { 

            if(tipo.equals(var.getTipo())){
                tablaDeSimbolos.insertar(new Simbolo(tipo, nombre, 0, var.getValor()));
            }
            else {
                consola.append("\nError Sémantico: no es posible asignar, tipos no compatibles en"+
                    "\n" + nombre + " Fila: " + fila);
                    tablaDeSimbolos.insertar(new Simbolo(tipo, nombre, 0, "NULO"));
            }
        }
    }
    private void asignarSimbolo(String id, Object numero, Object exp){
        int des = (int)numero;
        Expresion expre = (Expresion)exp;
        if(tablaDeSimbolos.pertenece(id)){
            Simbolo s = tablaDeSimbolos.getObjeto(id);
            if(s.getTipo().equals(expre.getTipo())){
                switch (des){
                    case 0:
                        s.igual(expre);
                        break;
                    case 1:
                        s.igualMas(expre);
                        break;
                    case 2:
                        s.igualMenos(expre);
                        break;
                    case 3:
                        s.igualPor(expre);
                        break;
                }
            } else {
                consola.append("Error Semántico: El simbolo " + id + " no es compatible con ese tipo.");
            }
        }else{
            consola.append("Error Semántico: El simbolo " + id + " no ha sido declarado.");
        }
    }

    private Expresion operacion(Object a, Object b, int selec, int fila){
        if(selec == 0){
            Expresion resultante = Expresion.sumar(a, b);
            if(resultante.getTipo().equals("ERROR")){
                consola.append("\nError Semántico en fila: " + fila + " tipos incompatibles.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            if(resultante.getTipo().equals("ERROR_NULO")){
                consola.append("\nError Semántico en fila: " + fila + " valor nulo, no declarado.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            return resultante;
        }
        if(selec == 1){
            Expresion resultante = Expresion.restar(a, b);
            if(resultante.getTipo().equals("ERROR")){
                consola.append("\nError Semántico en fila: " + fila + " tipos incompatibles.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            if(resultante.getTipo().equals("ERROR_NULO")){
                consola.append("\nError Semántico en fila: " + fila + " valor nulo, no declarado.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            return resultante;
        }
        if(selec == 2){
            Expresion resultante = Expresion.dividir(a, b);
            if(resultante.getTipo().equals("ERROR")){
                consola.append("\nError Semántico en fila: " + fila + " tipos incompatibles.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            if(resultante.getTipo().equals("ERROR_NULO")){
                consola.append("\nError Semántico en fila: " + fila + " valor nulo, no declarado.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            return resultante;
        }
        if(selec == 3){
            Expresion resultante = Expresion.multiplicar(a, b);
            if(resultante.getTipo().equals("ERROR")){
                consola.append("\nError Semántico en fila: " + fila + " tipos incompatibles.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            if(resultante.getTipo().equals("ERROR_NULO")){
                consola.append("\nError Semántico en fila: " + fila + " valor nulo, no declarado.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            return resultante;
        }
        if(selec == 4){
            Expresion resultante = Expresion.modulo(a, b);
            if(resultante.getTipo().equals("ERROR")){
                consola.append("\nError Semántico en fila: " + fila + " tipos incompatibles.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            if(resultante.getTipo().equals("ERROR_NULO")){
                consola.append("\nError Semántico en fila: " + fila + " valor nulo, no declarado.");
                return new Expresion("ERROR_IGNORAR", "NULO", 0);
            }
            return resultante;
        }
        return new Expresion("ERROR", "NULO", 0);
    }

    private void print(Object c){
        Expresion e = (Expresion)c;
        String texto = e.getValor().toString();
        consola.append("\n" + texto + "\n");
    }




  private final SintacticoCP parser;

  /** Constructor */
  CUP$SintacticoCP$actions(SintacticoCP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoCP$do_action_part00000000(
    int                        CUP$SintacticoCP$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCP$parser,
    java.util.Stack            CUP$SintacticoCP$stack,
    int                        CUP$SintacticoCP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCP$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCP$parser.done_parsing();
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EPSILON ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("EPSILON",0, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), (Symbol) RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error LLAMADA 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LLAMADA ::= LLAMADA inicio INSTRUCCION ultimo 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("LLAMADA",2, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LLAMADA ::= inicio INSTRUCCION ultimo 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("LLAMADA",2, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION TIPO puntocoma 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= TIPO puntocoma 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= PRINTLN 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= AUMENTO 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= error 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TYPE id ASIGOP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 ingresarSimbolo(currentType, a.toString(), b, aright); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGOP ::= igual C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = a;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGOP",6, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGOP ::= EPSILON 
            {
              Object RESULT =null;
		 RESULT = new Expresion("", "NULO", 0); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGOP",6, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= id ASIGTIP C 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		asignarSimbolo(b.toString(), c, a);
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= bool 
            {
              Object RESULT =null;
		currentType = "bool"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= caracter 
            {
              Object RESULT =null;
		currentType = "caracter";
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= cadena 
            {
              Object RESULT =null;
		currentType = "cadena";
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= doble 
            {
              Object RESULT =null;
		currentType = "decimal";
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= entero 
            {
              Object RESULT =null;
		currentType = "entero";
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGTIP ::= igual 
            {
              Object RESULT =null;
		 RESULT = 0;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGTIP",9, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGTIP ::= igualmas 
            {
              Object RESULT =null;
		 RESULT = 1;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGTIP",9, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGTIP ::= igualmenos 
            {
              Object RESULT =null;
		 RESULT = 2;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGTIP",9, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGTIP ::= igualpor 
            {
              Object RESULT =null;
		 RESULT = 3;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ASIGTIP",9, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AUMENTO ::= id P 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("AUMENTO",10, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // P ::= aumento 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("P",11, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // P ::= menguar 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("P",11, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRINTLN ::= print abrepar C cierrapar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).value;
		 print(a);
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("PRINTLN",12, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E modulo E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = operacion(a,b,4,aright); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E por E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = operacion(a,b,3,aright); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E div E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = operacion(a,b,2,aright); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E menos E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		RESULT = operacion(a,b,1,aright);
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E mas E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = operacion(a,b,0,aright); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 Expresion as = new Expresion("entero", a.toString(), aright);
                    RESULT = as;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= numdecimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = new Expresion("decimal", a.toString(), aright);
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= strng 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = new Expresion("cadena", a.toString(), aright);
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		 RESULT = obtenerValor(a.toString());
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= menos E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= RES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= abrepar C cierrapar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).value;
		RESULT = a;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // C ::= C and C 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // C ::= C or C 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // C ::= E menor E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // C ::= E mayor E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // C ::= E menorigual E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // C ::= E mayorigual E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // C ::= E comparar E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // C ::= E noes E 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // C ::= E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // C ::= not C 
            {
              Object RESULT =null;

              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // C ::= car 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.peek()).value;
		RESULT = new Expresion("caracter", "" + a, aright);
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("C",14, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RES ::= result punto UNO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)).value;
		 RESULT = obtenerResult(clasificacion, index, atributo, scr, aright); scr = false; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("RES",15, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UNO ::= score 
            {
              Object RESULT =null;
		 scr = true; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("UNO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UNO ::= clases ARRAY punto DOS 
            {
              Object RESULT =null;
		 clasificacion = "Clases"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("UNO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UNO ::= variables ARRAY punto DOS 
            {
              Object RESULT =null;
		 clasificacion = "Variables"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("UNO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // UNO ::= metodos ARRAY punto DOS 
            {
              Object RESULT =null;
		 clasificacion = "Metodos"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("UNO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // UNO ::= comentarios ARRAY punto DOS 
            {
              Object RESULT =null;
		 clasificacion = "Comentarios"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("UNO",16, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DOS ::= nombre 
            {
              Object RESULT =null;
		 atributo = "Nombre"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DOS ::= tipo 
            {
              Object RESULT =null;
		 atributo = "Tipo"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DOS ::= funcion 
            {
              Object RESULT =null;
		 atributo = "funcion"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DOS ::= clase 
            {
              Object RESULT =null;
		 atributo = "Clase"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DOS ::= parametros 
            {
              Object RESULT =null;
		 atributo = "Parametros"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DOS ::= texto 
            {
              Object RESULT =null;
		 atributo = "texto"; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("DOS",17, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARRAY ::= abrecor C cierracor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-1)).value;
		 index = obtenerIndice(a, aright); 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ARRAY",18, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.elementAt(CUP$SintacticoCP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARRAY ::= EPSILON 
            {
              Object RESULT =null;
		 index = 0; 
              CUP$SintacticoCP$result = parser.getSymbolFactory().newSymbol("ARRAY",18, ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCP$stack.peek()), RESULT);
            }
          return CUP$SintacticoCP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoCP$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoCP$do_action(
    int                        CUP$SintacticoCP$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCP$parser,
    java.util.Stack            CUP$SintacticoCP$stack,
    int                        CUP$SintacticoCP$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoCP$do_action_part00000000(
                               CUP$SintacticoCP$act_num,
                               CUP$SintacticoCP$parser,
                               CUP$SintacticoCP$stack,
                               CUP$SintacticoCP$top);
    }
}

}
