
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoHTML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosHTML.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoHTML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\002\000\002\003" +
    "\003\000\002\004\006\000\002\005\005\000\002\006\005" +
    "\000\002\007\005\000\002\007\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\010\005" +
    "\000\002\011\005\000\002\013\005\000\002\014\005\000" +
    "\002\015\005\000\002\016\005\000\002\021\005\000\002" +
    "\023\005\000\002\023\003\000\002\022\005\000\002\024" +
    "\005\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\005\000\002\027\005\000\002\062\006\000" +
    "\002\062\003\000\002\030\006\000\002\032\006\000\002" +
    "\034\006\000\002\036\005\000\002\040\005\000\002\042" +
    "\005\000\002\044\005\000\002\046\005\000\002\050\005" +
    "\000\002\052\005\000\002\054\005\000\002\056\005\000" +
    "\002\060\005\000\002\031\003\000\002\033\003\000\002" +
    "\035\003\000\002\037\003\000\002\041\003\000\002\043" +
    "\003\000\002\045\003\000\002\047\003\000\002\051\003" +
    "\000\002\053\003\000\002\055\003\000\002\057\003\000" +
    "\002\061\003\000\002\017\005\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\004\005\001\002\000\004\004\022\001" +
    "\002\000\004\010\011\001\002\000\004\002\010\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\006\005\000\027\012\001\002\000\004\007\016\001\002" +
    "\000\004\005\uffde\001\002\000\004\005\015\001\002\000" +
    "\004\004\uffdd\001\002\000\004\030\017\001\002\000\006" +
    "\005\000\027\012\001\002\000\004\005\uffdf\001\002\000" +
    "\006\004\027\032\000\001\002\000\004\011\202\001\002" +
    "\000\004\004\024\001\002\000\004\012\177\001\002\000" +
    "\004\031\175\001\002\000\006\004\027\033\000\001\002" +
    "\000\024\003\055\004\035\013\064\014\061\020\046\021" +
    "\053\024\037\025\036\026\034\001\002\000\026\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\044\ufffa\045\ufffa\001\002\000\004\033\033\001\002" +
    "\000\004\031\ufffc\001\002\000\004\031\uffce\001\002\000" +
    "\006\005\000\027\012\001\002\000\006\022\167\023\170" +
    "\001\002\000\006\005\000\027\012\001\002\000\006\005" +
    "\000\027\012\001\002\000\030\004\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\044" +
    "\ufff3\045\ufff3\001\002\000\006\004\122\042\000\001\002" +
    "\000\030\004\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\044\ufff4\045\ufff4\001\002" +
    "\000\030\004\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\001\002" +
    "\000\030\004\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\044\ufff9\045\ufff9\001\002" +
    "\000\006\004\027\034\000\001\002\000\006\005\000\027" +
    "\012\001\002\000\006\004\027\041\000\001\002\000\030" +
    "\004\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\001\002\000\006" +
    "\004\027\040\000\001\002\000\006\004\027\037\000\001" +
    "\002\000\006\005\000\027\012\001\002\000\030\004\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\044\ufff7\045\ufff7\001\002\000\030\004\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\044\ufff0\045\ufff0\001\002\000\030\004\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\044\ufff2\045\ufff2\001\002\000\030\004\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\044\ufff1\045\ufff1\001\002\000\030\004\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\044\ufff6\045\ufff6\001\002\000\006\005\000" +
    "\027\012\001\002\000\006\004\027\036\000\001\002\000" +
    "\006\004\027\035\000\001\002\000\006\005\000\027\012" +
    "\001\002\000\030\004\027\032\000\033\000\034\000\035" +
    "\000\036\000\037\000\040\000\041\000\044\000\045\000" +
    "\001\002\000\026\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\044\ufffb\045\ufffb\001\002" +
    "\000\004\005\070\001\002\000\006\004\uffda\034\uffda\001" +
    "\002\000\004\035\073\001\002\000\030\004\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\044\uffee\045\uffee\001\002\000\030\004\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\044\uffcc\045\uffcc\001\002\000\004\036\076\001\002" +
    "\000\030\004\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\044\uffed\045\uffed\001\002" +
    "\000\030\004\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\045\uffcb\001\002" +
    "\000\004\005\100\001\002\000\006\004\uffd4\042\uffd4\001" +
    "\002\000\004\005\102\001\002\000\006\004\uffd8\036\uffd8" +
    "\001\002\000\004\037\104\001\002\000\030\004\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\044\uffca\045\uffca\001\002\000\030\004\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\044\uffec\045\uffec\001\002\000\004\040\107\001" +
    "\002\000\030\004\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\001" +
    "\002\000\030\004\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\001" +
    "\002\000\004\041\112\001\002\000\030\004\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\044\uffc8\045\uffc8\001\002\000\030\004\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\044\uffea\045\uffea\001\002\000\004\005\115\001\002" +
    "\000\006\004\uffd9\035\uffd9\001\002\000\004\034\120\001" +
    "\002\000\030\004\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\044\uffef\045\uffef\001" +
    "\002\000\030\004\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\044\uffcd\045\uffcd\001" +
    "\002\000\004\042\161\001\002\000\004\016\124\001\002" +
    "\000\004\042\uffe7\001\002\000\006\005\000\027\012\001" +
    "\002\000\006\004\122\042\000\001\002\000\006\004\127" +
    "\043\000\001\002\000\006\015\137\017\142\001\002\000" +
    "\004\043\uffe4\001\002\000\004\043\132\001\002\000\006" +
    "\004\uffc6\042\uffc6\001\002\000\006\004\uffe6\042\uffe6\001" +
    "\002\000\006\004\uffe2\043\uffe2\001\002\000\006\004\027" +
    "\045\000\001\002\000\006\004\127\043\000\001\002\000" +
    "\006\005\000\027\012\001\002\000\006\004\uffe3\043\uffe3" +
    "\001\002\000\006\004\027\044\000\001\002\000\006\005" +
    "\000\027\012\001\002\000\004\005\144\001\002\000\006" +
    "\004\uffd1\045\uffd1\001\002\000\004\044\146\001\002\000" +
    "\006\004\uffc5\043\uffc5\001\002\000\006\004\uffe1\043\uffe1" +
    "\001\002\000\004\005\151\001\002\000\006\004\uffd2\044" +
    "\uffd2\001\002\000\004\043\uffe5\001\002\000\004\045\155" +
    "\001\002\000\006\004\uffe0\043\uffe0\001\002\000\006\004" +
    "\uffc4\043\uffc4\001\002\000\004\042\uffe8\001\002\000\004" +
    "\005\160\001\002\000\006\004\uffd3\043\uffd3\001\002\000" +
    "\030\004\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\044\uffc7\045\uffc7\001\002\000" +
    "\030\004\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\001\002\000" +
    "\004\005\164\001\002\000\006\004\uffd7\037\uffd7\001\002" +
    "\000\004\005\166\001\002\000\006\004\uffd6\040\uffd6\001" +
    "\002\000\004\005\172\001\002\000\004\005\171\001\002" +
    "\000\030\004\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\044\uffc2\045\uffc2\001\002" +
    "\000\030\004\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\044\uffc3\045\uffc3\001\002" +
    "\000\004\005\174\001\002\000\006\004\uffd5\041\uffd5\001" +
    "\002\000\004\002\uffd0\001\002\000\004\002\ufffe\001\002" +
    "\000\006\005\000\027\012\001\002\000\004\005\201\001" +
    "\002\000\006\004\uffdb\033\uffdb\001\002\000\006\005\000" +
    "\027\012\001\002\000\004\005\204\001\002\000\006\004" +
    "\uffdc\032\uffdc\001\002\000\004\032\206\001\002\000\004" +
    "\004\uffcf\001\002\000\004\004\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\010\003\005\004\006\030\003\001\001\000" +
    "\006\005\022\032\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\012\062\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\012\062\017\001\001\000\002\001\001\000\006" +
    "\002\027\007\204\001\001\000\002\001\001\000\006\006" +
    "\024\034\025\001\001\000\002\001\001\000\004\031\175" +
    "\001\001\000\006\002\027\007\030\001\001\000\044\010" +
    "\047\011\053\012\064\013\057\014\042\015\041\016\037" +
    "\017\055\020\056\021\043\036\044\040\062\042\061\044" +
    "\051\046\050\050\046\052\040\001\001\000\002\001\001" +
    "\000\004\035\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\012\062\172\001\001\000\002\001\001" +
    "\000\006\002\012\062\164\001\001\000\006\002\012\062" +
    "\162\001\001\000\002\001\001\000\006\002\122\023\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\027\007\115\001\001\000\006\002\012" +
    "\062\113\001\001\000\006\002\027\007\110\001\001\000" +
    "\002\001\001\000\006\002\027\007\105\001\001\000\006" +
    "\002\027\007\102\001\001\000\006\002\012\062\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\012\062" +
    "\076\001\001\000\006\002\027\007\073\001\001\000\006" +
    "\002\027\007\070\001\001\000\006\002\012\062\066\001" +
    "\001\000\006\002\027\007\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\161\001\001\000\006\022\124\054\125\001\001" +
    "\000\002\001\001\000\006\002\012\062\156\001\001\000" +
    "\006\002\122\023\155\001\001\000\006\002\127\024\130" +
    "\001\001\000\014\025\135\026\137\027\133\056\140\060" +
    "\134\001\001\000\002\001\001\000\004\055\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\027\007\152\001\001\000\006\002\127\024\151" +
    "\001\001\000\006\002\012\062\147\001\001\000\002\001" +
    "\001\000\006\002\027\007\144\001\001\000\006\002\012" +
    "\062\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\012\062\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\012\062\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\206" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s != null && s.value !=null){
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico: " + lexema + " en Fila: " + fila + " Columna: " + columna);

        }else {
            System.out.println("Error Sintactico");
        }
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
      if(s != null && s.value !=null){
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
          	System.out.println("Error Sintactico: " + lexema + " en Fila: " + fila + " Columna: " + columna);

        }else {
            System.out.println("Error Sintactico");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoHTML$actions {


  private final SintacticoHTML parser;

  /** Constructor */
  CUP$SintacticoHTML$actions(SintacticoHTML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoHTML$do_action_part00000000(
    int                        CUP$SintacticoHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHTML$parser,
    java.util.Stack            CUP$SintacticoHTML$stack,
    int                        CUP$SintacticoHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoHTML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoHTML$parser.done_parsing();
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EPSILON ::= 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("EPSILON",0, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), (Symbol) RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= HTML 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HTML ::= ABRE_HTML HEAD BODY CIERRA_HTML 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("HTML",2, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HEAD ::= ABRE_HEAD CUERPO CIERRA_HEAD 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("HEAD",3, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= ABRE_BODY CUERPO CIERRA_BODY 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= abre ESTRUCTURA CUERPO 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= EPSILON 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA ::= TABLA 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA ::= TITLE 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA ::= DIV 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA ::= PE 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA ::= H1 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA ::= H2 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA ::= H3 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA ::= BR 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA ::= HR 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA ::= error 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TITLE ::= ABRE_TITLE CUERPO CIERRA_TITLE 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("TITLE",6, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DIV ::= ABRE_DIV CUERPO CIERRA_DIV 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("DIV",7, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PE ::= ABRE_PE CUERPO CIERRA_PE 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("PE",9, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // H1 ::= ABRE_H1 CUERPO CIERRA_H1 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("H1",10, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H2 ::= ABRE_H2 CUERPO CIERRA_H2 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("H2",11, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H3 ::= ABRE_H3 CUERPO CIERRA_H3 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("H3",12, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TABLA ::= ABRE_TABLA COSA CIERRA_TABLA 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("TABLA",15, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COSA ::= abre TR COSA 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("COSA",17, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COSA ::= EPSILON 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("COSA",17, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TR ::= ABRE_TR COSADOS CIERRA_TR 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("TR",16, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COSADOS ::= abre FILA COSADOS 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("COSADOS",18, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COSADOS ::= EPSILON 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("COSADOS",18, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FILA ::= TH 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("FILA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FILA ::= TD 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("FILA",19, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TH ::= ABRE_TH CUERPO CIERRA_TH 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("TH",20, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TD ::= ABRE_TD CUERPO CIERRA_TD 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("TD",21, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATT ::= atributo igual valor ATT 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ATT",48, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATT ::= EPSILON 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ATT",48, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ABRE_HTML ::= abre html ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_HTML",22, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ABRE_HEAD ::= abre head ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_HEAD",24, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ABRE_BODY ::= abre body ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_BODY",26, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ABRE_TITLE ::= title ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_TITLE",28, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ABRE_DIV ::= div ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_DIV",30, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ABRE_PE ::= p ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_PE",32, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ABRE_H1 ::= h1 ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_H1",34, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ABRE_H2 ::= h2 ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_H2",36, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ABRE_H3 ::= h3 ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_H3",38, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ABRE_TABLA ::= table ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_TABLA",40, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ABRE_TR ::= tr ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_TR",42, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ABRE_TH ::= th ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_TH",44, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ABRE_TD ::= td ATT cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("ABRE_TD",46, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CIERRA_HTML ::= finhtml 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_HTML",23, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CIERRA_HEAD ::= finhead 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_HEAD",25, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CIERRA_BODY ::= finbody 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_BODY",27, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CIERRA_TITLE ::= fintitle 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_TITLE",29, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CIERRA_DIV ::= findiv 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_DIV",31, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CIERRA_PE ::= finp 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_PE",33, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CIERRA_H1 ::= finh1 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_H1",35, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CIERRA_H2 ::= finh2 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_H2",37, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CIERRA_H3 ::= finh3 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_H3",39, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CIERRA_TABLA ::= fintable 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_TABLA",41, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CIERRA_TR ::= fintr 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_TR",43, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CIERRA_TH ::= finth 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_TH",45, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CIERRA_TD ::= fintd 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("CIERRA_TD",47, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BR ::= abre br cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("BR",13, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // HR ::= abre hr cierra 
            {
              Object RESULT =null;

              CUP$SintacticoHTML$result = parser.getSymbolFactory().newSymbol("HR",14, ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.elementAt(CUP$SintacticoHTML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoHTML$stack.peek()), RESULT);
            }
          return CUP$SintacticoHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoHTML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoHTML$do_action(
    int                        CUP$SintacticoHTML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoHTML$parser,
    java.util.Stack            CUP$SintacticoHTML$stack,
    int                        CUP$SintacticoHTML$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoHTML$do_action_part00000000(
                               CUP$SintacticoHTML$act_num,
                               CUP$SintacticoHTML$parser,
                               CUP$SintacticoHTML$stack,
                               CUP$SintacticoHTML$top);
    }
}

}
