
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 22 11:13:02 GMT-12:00 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import finalcompi1.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 22 11:13:02 GMT-12:00 2018
  */
public class parserCli extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCli() {super();}

  /** Constructor which sets the default scanner. */
  public parserCli(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCli(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\007\006\000" +
    "\002\007\006\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\010\013" +
    "\000\002\006\005\000\002\006\003\000\002\011\005\000" +
    "\002\011\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\005\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\014\006\014\014\004\015\012\016\020\032" +
    "\017\001\002\000\024\015\067\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\001\002\000" +
    "\020\002\ufffb\006\ufffb\014\ufffb\015\ufffb\016\ufffb\032\ufffb" +
    "\034\ufffb\001\002\000\004\002\066\001\002\000\016\002" +
    "\000\006\014\014\004\015\012\016\020\032\017\001\002" +
    "\000\020\002\ufffc\006\ufffc\014\ufffc\015\ufffc\016\ufffc\032" +
    "\ufffc\034\ufffc\001\002\000\020\002\ufffe\006\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\032\ufffe\034\ufffe\001\002\000\024\004" +
    "\061\017\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\001\002\000\020\002\ufffa\006\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\032\ufffa\034\ufffa\001\002\000\012" +
    "\006\014\014\026\015\025\016\020\001\002\000\020\002" +
    "\ufffd\006\ufffd\014\ufffd\015\ufffd\016\ufffd\032\ufffd\034\ufffd" +
    "\001\002\000\022\017\045\020\040\021\041\022\037\025" +
    "\042\026\044\027\046\030\043\001\002\000\004\006\030" +
    "\001\002\000\050\002\ufff0\006\ufff0\007\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\034\ufff0\001\002\000\006\023\023\024\022\001\002" +
    "\000\012\006\014\014\026\015\025\016\020\001\002\000" +
    "\012\006\014\014\026\015\025\016\020\001\002\000\024" +
    "\002\uffec\006\uffec\007\uffec\014\uffec\015\uffec\016\uffec\031" +
    "\uffec\032\uffec\034\uffec\001\002\000\050\002\ufff2\006\ufff2" +
    "\007\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\034\ufff2\001\002\000\050\002" +
    "\ufff1\006\ufff1\007\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\001\002" +
    "\000\024\002\uffeb\006\uffeb\007\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\031\uffeb\032\uffeb\034\uffeb\001\002\000\012\006\014" +
    "\014\026\015\025\016\020\001\002\000\004\007\032\001" +
    "\002\000\004\033\033\001\002\000\014\006\014\014\004" +
    "\015\012\016\020\032\017\001\002\000\016\006\014\014" +
    "\004\015\012\016\020\032\017\034\036\001\002\000\020" +
    "\002\uffff\006\uffff\014\uffff\015\uffff\016\uffff\032\uffff\034" +
    "\uffff\001\002\000\020\002\uffe6\006\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\032\uffe6\034\uffe6\001\002\000\012\006\014\014" +
    "\026\015\025\016\020\001\002\000\012\006\014\014\026" +
    "\015\025\016\020\001\002\000\012\006\014\014\026\015" +
    "\025\016\020\001\002\000\012\006\014\014\026\015\025" +
    "\016\020\001\002\000\012\006\014\014\026\015\025\016" +
    "\020\001\002\000\012\006\014\014\026\015\025\016\020" +
    "\001\002\000\012\006\014\014\026\015\025\016\020\001" +
    "\002\000\012\006\014\014\026\015\025\016\020\001\002" +
    "\000\040\002\uffe8\006\uffe8\007\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\045\020\040\021\041\022\037\023\uffe8\024\uffe8" +
    "\031\uffe8\032\uffe8\034\uffe8\001\002\000\050\002\ufff7\006" +
    "\ufff7\007\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\040" +
    "\021\ufff7\022\037\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\001\002\000\040" +
    "\002\uffe9\006\uffe9\007\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\045\020\040\021\041\022\037\023\uffe9\024\uffe9\031\uffe9" +
    "\032\uffe9\034\uffe9\001\002\000\040\002\uffe7\006\uffe7\007" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\045\020\040\021\041" +
    "\022\037\023\uffe7\024\uffe7\031\uffe7\032\uffe7\034\uffe7\001" +
    "\002\000\040\002\uffea\006\uffea\007\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\045\020\040\021\041\022\037\023\uffea\024" +
    "\uffea\031\uffea\032\uffea\034\uffea\001\002\000\050\002\ufff5" +
    "\006\ufff5\007\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\040\021\ufff5\022\037\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\034\ufff5\001\002\000" +
    "\050\002\ufff6\006\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6" +
    "\001\002\000\050\002\ufff4\006\ufff4\007\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\034\ufff4\001\002\000\014\006\060\017\045\020\040" +
    "\021\041\022\037\001\002\000\050\002\ufff3\006\ufff3\007" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\034\ufff3\001\002\000\012\006\014" +
    "\014\026\015\025\016\020\001\002\000\024\017\045\020" +
    "\040\021\041\022\037\025\042\026\044\027\046\030\043" +
    "\031\065\001\002\000\004\031\064\001\002\000\020\002" +
    "\ufff8\006\ufff8\014\ufff8\015\ufff8\016\ufff8\032\ufff8\034\ufff8" +
    "\001\002\000\020\002\ufff9\006\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\032\ufff9\034\ufff9\001\002\000\004\002\001\001\002" +
    "\000\006\005\uffed\031\uffed\001\002\000\006\005\071\031" +
    "\072\001\002\000\004\015\101\001\002\000\004\036\073" +
    "\001\002\000\004\015\067\001\002\000\006\005\071\031" +
    "\075\001\002\000\004\037\076\001\002\000\004\015\067" +
    "\001\002\000\006\005\071\031\100\001\002\000\020\002" +
    "\uffef\006\uffef\014\uffef\015\uffef\016\uffef\032\uffef\034\uffef" +
    "\001\002\000\006\005\uffee\031\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\024\002\005\003\006\004\010\005\012\007" +
    "\014\010\007\011\004\012\015\013\020\001\001\000\004" +
    "\006\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\034\005\012\007\014\010\007\011\004\012\015" +
    "\013\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\015\013\026" +
    "\001\001\000\006\012\015\013\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\030\012\015\013\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\033\004\010\005\012" +
    "\007\014\010\007\011\004\012\015\013\020\001\001\000" +
    "\020\004\034\005\012\007\014\010\007\011\004\012\015" +
    "\013\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\055\001\001\000\004\012\054\001\001\000\004" +
    "\012\053\001\001\000\004\012\052\001\001\000\004\012" +
    "\051\001\001\000\004\012\050\001\001\000\004\012\047" +
    "\001\001\000\004\012\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\062" +
    "\012\061\013\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCli$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCli$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCli$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
       // System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
     //   Inicio.lisErrores.add("Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+" Se esperaba otro token\n");       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCli$actions {

//Codigo de usuario
    String tmp="";

  private final parserCli parser;

  /** Constructor */
  CUP$parserCli$actions(parserCli parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCli$do_action(
    int                        CUP$parserCli$act_num,
    java_cup.runtime.lr_parser CUP$parserCli$parser,
    java.util.Stack            CUP$parserCli$stack,
    int                        CUP$parserCli$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCli$result;

      /* select the action based on the action number */
      switch (CUP$parserCli$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAAUX ::= Tkn_si Tkn_parA EXPRESIONES Tkn_parC Tkn_llaA S Tkn_llaC 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAAUX",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-6)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICION ::= VALUES Tkn_diferente VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDICION ::= VALUES Tkn_igualigual VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICION ::= VALUES Tkn_mayor VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDICION ::= VALUES Tkn_menor VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("CONDICION",9, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESIONES ::= CONDICION Tkn_Or CONDICION 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESIONES ::= CONDICION Tkn_And CONDICION 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAID ::= Tkn_id 
            {
              Arbol RESULT =null;
		int tknleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int tknright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		Symbol tkn = (Symbol)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
		Arbol arbol=new Arbol("Tkn_id",""+tkn.left,""+tkn.right,""+tkn.value);
            
          RESULT=arbol;
                            
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTAID",4, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAID ::= LISTAID Tkn_coma Tkn_id 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTAID",4, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= Tkn_entero LISTAID Tkn_PuntoComa Tkn_Boleano LISTAID Tkn_PuntoComa Tkn_Cad LISTAID Tkn_PuntoComa 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALUES ::= Tkn_cadena 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALUES ::= Tkn_entero 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALUES ::= Tkn_id 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALUES ::= Tkn_parA VALUES Tkn_parA 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALUES ::= VALUES Tkn_div VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALUES ::= VALUES Tkn_menos VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALUES ::= VALUES Tkn_asterisco VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALUES ::= VALUES Tkn_mas VALUES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("VALUES",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACIONES ::= Tkn_id Tkn_igual EXPRESIONES Tkn_PuntoComa 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACIONES ::= Tkn_id Tkn_igual VALUES Tkn_PuntoComa 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIAAUX 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= EXPRESIONES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACIONES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= ASIGNACIONES 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= SENTENCIA 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S SENTENCIA 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              Arbol RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).right;
		Arbol start_val = (Arbol)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
		RESULT = start_val;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCli$parser.done_parsing();
          return CUP$parserCli$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

