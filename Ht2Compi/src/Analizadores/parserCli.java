
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 10 15:58:44 GMT-12:00 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import ht2compi.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 10 15:58:44 GMT-12:00 2018
  */
public class parserCli extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCli() {super();}

  /** Constructor which sets the default scanner. */
  public parserCli(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCli(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\010" +
    "\002\000\002\003\013\000\002\004\004\000\002\004\003" +
    "\000\002\011\002\000\002\012\002\000\002\006\012\000" +
    "\002\005\004\000\002\005\003\000\002\007\007\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\004\010\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\041\001\002\000\004\004\007\001\002" +
    "\000\004\011\010\001\002\000\004\014\011\001\002\000" +
    "\004\005\012\001\002\000\004\014\013\001\002\000\004" +
    "\012\014\001\002\000\004\013\uffff\001\002\000\004\013" +
    "\020\001\002\000\006\002\ufffe\013\020\001\002\000\006" +
    "\002\ufffc\013\ufffc\001\002\000\004\004\ufffb\001\002\000" +
    "\004\004\022\001\002\000\004\011\023\001\002\000\006" +
    "\005\024\006\025\001\002\000\010\005\ufff5\006\ufff5\015" +
    "\ufff5\001\002\000\004\014\034\001\002\000\010\005\024" +
    "\006\025\015\030\001\002\000\010\005\ufff7\006\ufff7\015" +
    "\ufff7\001\002\000\004\012\ufffa\001\002\000\010\005\ufff8" +
    "\006\ufff8\015\ufff8\001\002\000\004\012\033\001\002\000" +
    "\006\002\ufff9\013\ufff9\001\002\000\004\005\035\001\002" +
    "\000\004\014\036\001\002\000\004\007\037\001\002\000" +
    "\010\005\ufff6\006\ufff6\015\ufff6\001\002\000\006\002\ufffd" +
    "\013\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\014\001\001\000\006\004\015" +
    "\006\016\001\001\000\004\006\037\001\001\000\002\001" +
    "\001\000\004\011\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\025\007\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\030\001\001\000\002" +
    "\001\001\000\004\012\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCli$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCli$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCli$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
     //   Inicio.lisErrores.add("Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+" Se esperaba otro token\n");       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCli$actions {

//Codigo de usuario
    String tmp="";

  private final parserCli parser;

  /** Constructor */
  CUP$parserCli$actions(parserCli parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCli$do_action(
    int                        CUP$parserCli$act_num,
    java_cup.runtime.lr_parser CUP$parserCli$parser,
    java.util.Stack            CUP$parserCli$stack,
    int                        CUP$parserCli$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCli$result;

      /* select the action based on the action number */
      switch (CUP$parserCli$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CORD ::= Tkn_coma 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("CORD",5, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CORD ::= Tkn_parA Tkn_entero Tkn_coma Tkn_entero Tkn_parC 
            {
              Object RESULT =null;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).right;
		String xx = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
		Principal.cordenadas.add(new Cordenadas(xx,yy));
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("CORD",5, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA ::= CORD 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA ::= LISTA CORD 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTA",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DIBUJAR ::= Tkn_dibujar NT$1 Tkn_igual Tkn_coA LISTA Tkn_id NT$2 Tkn_coC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("DIBUJAR",4, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Principal.ponerColor(color);
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$2",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
Principal.cordenadas.clear();
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIADIBUJAR ::= DIBUJAR 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIADIBUJAR",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIADIBUJAR ::= SENTENCIADIBUJAR DIBUJAR 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIADIBUJAR",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= Tkn_panel Tkn_igual Tkn_coA Tkn_entero Tkn_coma Tkn_entero Tkn_coC NT$0 SENTENCIADIBUJAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String xx = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).right;
		String xx = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
Principal.setTamano(xx,yy);
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
		RESULT = start_val;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCli$parser.done_parsing();
          return CUP$parserCli$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

