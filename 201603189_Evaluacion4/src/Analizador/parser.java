
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 20 02:33:12 GMT-12:00 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import pkg201603189_evaluacion3.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 20 02:33:12 GMT-12:00 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\011\000\002\004\015\000" +
    "\002\004\011\000\002\004\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\005\005\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\016\003\012\004\005\005\004\006\006\031" +
    "\010\032\014\001\002\000\004\024\112\001\002\000\004" +
    "\010\106\001\002\000\004\024\102\001\002\000\022\002" +
    "\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\031\ufffe\032\ufffe" +
    "\034\ufffe\001\002\000\004\010\070\001\002\000\004\002" +
    "\067\001\002\000\022\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\031\ufff7\032\ufff7\034\ufff7\001\002\000\020\002" +
    "\000\003\012\004\005\005\004\006\006\031\010\032\014" +
    "\001\002\000\004\010\015\001\002\000\016\010\017\013" +
    "\021\024\016\025\023\026\022\030\020\001\002\000\032" +
    "\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\001\002" +
    "\000\016\010\017\013\021\024\016\025\023\026\022\030" +
    "\020\001\002\000\016\010\017\013\021\024\016\025\023" +
    "\026\022\030\020\001\002\000\016\010\017\013\021\024" +
    "\016\025\023\026\022\030\020\001\002\000\032\007\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\001\002\000\032" +
    "\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\001\002" +
    "\000\030\011\034\012\032\013\025\014\027\015\031\016" +
    "\037\017\026\020\035\021\030\022\036\023\033\001\002" +
    "\000\016\010\017\013\021\024\016\025\023\026\022\030" +
    "\020\001\002\000\016\010\017\013\021\024\016\025\023" +
    "\026\022\030\020\001\002\000\016\010\017\013\021\024" +
    "\016\025\023\026\022\030\020\001\002\000\020\010\017" +
    "\013\021\023\055\024\016\025\023\026\022\030\020\001" +
    "\002\000\016\010\017\013\021\024\016\025\023\026\022" +
    "\030\020\001\002\000\016\010\017\013\021\024\016\025" +
    "\023\026\022\030\020\001\002\000\004\023\051\001\002" +
    "\000\004\035\045\001\002\000\016\010\017\013\021\024" +
    "\016\025\023\026\022\030\020\001\002\000\020\010\017" +
    "\013\021\023\041\024\016\025\023\026\022\030\020\001" +
    "\002\000\016\010\017\013\021\024\016\025\023\026\022" +
    "\030\020\001\002\000\032\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\037\017\026\020\035\021\uffe9" +
    "\022\uffe9\023\033\001\002\000\016\010\017\013\021\024" +
    "\016\025\023\026\022\030\020\001\002\000\032\007\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\027\015\031\016\037\017" +
    "\026\020\035\021\uffed\022\uffed\023\033\001\002\000\032" +
    "\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\033\001\002" +
    "\000\032\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\033" +
    "\001\002\000\016\003\012\004\005\005\004\006\006\031" +
    "\010\032\014\001\002\000\020\003\012\004\005\005\004" +
    "\006\006\031\010\032\014\034\047\001\002\000\022\002" +
    "\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\031\ufff8\032\ufff8" +
    "\034\ufff8\001\002\000\022\002\uffff\003\uffff\004\uffff\005" +
    "\uffff\006\uffff\031\uffff\032\uffff\034\uffff\001\002\000\016" +
    "\010\017\013\021\024\016\025\023\026\022\030\020\001" +
    "\002\000\032\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\033\001\002\000\032\007\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\027\015\031\016\037\017\026\020\035\021\030\022" +
    "\036\023\033\001\002\000\032\007\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\037\017\026\020\035\021" +
    "\ufff2\022\ufff2\023\033\001\002\000\016\010\017\013\021" +
    "\024\016\025\023\026\022\030\020\001\002\000\032\007" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\027\015\031\016\037" +
    "\017\026\020\035\021\uffec\022\uffec\023\033\001\002\000" +
    "\032\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\033\001" +
    "\002\000\032\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\037\017\026\020\035\021\ufff3\022\ufff3\023" +
    "\033\001\002\000\032\007\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\033\001\002\000\032\007\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\027\015\031\016\037\017\026\020\035\021" +
    "\030\022\036\023\033\001\002\000\032\007\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\026\020" +
    "\035\021\ufff1\022\ufff1\023\033\001\002\000\032\007\uffe5" +
    "\011\uffe5\012\032\013\025\014\027\015\031\016\037\017" +
    "\026\020\035\021\030\022\036\023\033\001\002\000\030" +
    "\011\066\012\032\013\025\014\027\015\031\016\037\017" +
    "\026\020\035\021\030\022\036\023\033\001\002\000\032" +
    "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\001\002" +
    "\000\004\002\001\001\002\000\016\010\017\013\021\024" +
    "\016\025\023\026\022\030\020\001\002\000\030\011\072" +
    "\012\032\013\025\014\027\015\031\016\037\017\026\020" +
    "\035\021\030\022\036\023\033\001\002\000\004\035\073" +
    "\001\002\000\016\003\012\004\005\005\004\006\006\031" +
    "\010\032\014\001\002\000\020\003\012\004\005\005\004" +
    "\006\006\031\010\032\014\034\075\001\002\000\024\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\031\ufffa\032\ufffa" +
    "\033\076\034\ufffa\001\002\000\004\035\077\001\002\000" +
    "\016\003\012\004\005\005\004\006\006\031\010\032\014" +
    "\001\002\000\020\003\012\004\005\005\004\006\006\031" +
    "\010\032\014\034\101\001\002\000\022\002\ufff9\003\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\031\ufff9\032\ufff9\034\ufff9\001" +
    "\002\000\004\023\103\001\002\000\016\010\017\013\021" +
    "\024\016\025\023\026\022\030\020\001\002\000\030\007" +
    "\105\012\032\013\025\014\027\015\031\016\037\017\026" +
    "\020\035\021\030\022\036\023\033\001\002\000\022\002" +
    "\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\031\ufffb\032\ufffb" +
    "\034\ufffb\001\002\000\016\010\017\013\021\024\016\025" +
    "\023\026\022\030\020\001\002\000\030\011\110\012\032" +
    "\013\025\014\027\015\031\016\037\017\026\020\035\021" +
    "\030\022\036\023\033\001\002\000\004\007\111\001\002" +
    "\000\022\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\031" +
    "\ufffd\032\ufffd\034\ufffd\001\002\000\004\023\113\001\002" +
    "\000\016\010\017\013\021\024\016\025\023\026\022\030" +
    "\020\001\002\000\030\007\115\012\032\013\025\014\027" +
    "\015\031\016\037\017\026\020\035\021\030\022\036\023" +
    "\033\001\002\000\022\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\031\ufffc\032\ufffc\034\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\010\002\010\003\012\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\047\001\001\000\002\001\001\000\004" +
    "\005\023\001\001\000\002\001\001\000\004\005\064\001" +
    "\001\000\004\005\063\001\001\000\004\005\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\061\001\001\000\004\005\060\001\001\000\004" +
    "\005\057\001\001\000\004\005\055\001\001\000\004\005" +
    "\053\001\001\000\004\005\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\043\001\001\000\004\005" +
    "\041\001\001\000\004\005\037\001\001\000\002\001\001" +
    "\000\004\005\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\045\004\006\001\001" +
    "\000\004\004\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\073\004\006\001\001\000\004\004\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\077\004\006\001\001\000\004\004\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\113\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public LinkedList<Intruccion> AST;
    
    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        //Inicio.lisErrores.add("Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+" Se esperaba otro token\n");       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    
    public LinkedList<Intruccion> getAST() {
        return AST;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de usuario
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= NEGACION Expresion 
            {
              Operacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(b,Operacion.TipoOperacion.Negacion);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= Expresion OLOGICO Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Ologico);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= Expresion YLOGICO Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Ylogico);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= Expresion IGUAL IGUAL Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Igual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= Expresion DIFERENTE Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Diferente);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Expresion MENQUE IGUAL Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.MenorIgualQue);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Expresion MAYQUE IGUAL Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.MayorIgualQue);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expresion ::= Expresion MENQUE Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.MenorQue);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expresion ::= Expresion MAYQUE Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.MayorQue);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= IDENTIFICADOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.TipoOperacion.Identificador);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= DECIMAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expresion ::= ENTERO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expresion ::= MENOS Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.TipoOperacion.Negativo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= Expresion DIVIDIDO Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Division);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= Expresion POR Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Multiplicacion);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expresion ::= Expresion MENOS Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Resta);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expresion ::= Expresion MAS Expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.TipoOperacion.Suma);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expresion ::= PARIZQ Expresion PARDER 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= error 
            {
              Intruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= Tkn_While PARIZQ Expresion PARDER Tkn_LlaA Sentencias Tkn_LlaC 
            {
              Intruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Intruccion> b = (LinkedList<Intruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Mientras(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= Tkn_If PARIZQ Expresion PARDER Tkn_LlaA Sentencias Tkn_LlaC Tkn_Else Tkn_LlaA Sentencias Tkn_LlaC 
            {
              Intruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Intruccion> b = (LinkedList<Intruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Intruccion> c = (LinkedList<Intruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= Tkn_If PARIZQ Expresion PARDER Tkn_LlaA Sentencias Tkn_LlaC 
            {
              Intruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Intruccion> b = (LinkedList<Intruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new If(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= RDouble IDENTIFICADOR IGUAL Expresion PTCOMA 
            {
              Intruccion RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ids = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Declaracion(ids, Simbolo.Tipo.Num,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= RInt IDENTIFICADOR IGUAL Expresion PTCOMA 
            {
              Intruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Declaracion(id, Simbolo.Tipo.Num,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= RIMPRIMIR PARIZQ Expresion PARDER PTCOMA 
            {
              Intruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Imprimir(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sentencias ::= Sentencia 
            {
              LinkedList<Intruccion> RESULT =null;
		int intruleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intruright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Intruccion intru = (Intruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(intru);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Sentencias ::= Sentencias Sentencia 
            {
              LinkedList<Intruccion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Intruccion> list = (LinkedList<Intruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instruleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Intruccion instru = (Intruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=list; RESULT.add(instru);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= Sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Intruccion> a = (LinkedList<Intruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    
    parser.AST=a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

