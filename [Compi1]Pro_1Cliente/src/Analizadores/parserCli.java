
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 17 00:55:32 GMT-12:00 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import compi1.pro_1cliente.Registro;
import compi1.pro_1cliente.Panel;
import compi1.pro_1cliente.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 17 00:55:32 GMT-12:00 2018
  */
public class parserCli extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCli() {super();}

  /** Constructor which sets the default scanner. */
  public parserCli(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCli(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\003" +
    "\013\000\002\003\012\000\002\004\012\000\002\004\012" +
    "\000\002\004\012\000\002\016\002\000\002\004\013\000" +
    "\002\017\002\000\002\004\013\000\002\020\002\000\002" +
    "\021\002\000\002\004\014\000\002\012\004\000\002\012" +
    "\003\000\002\022\002\000\002\013\013\000\002\014\004" +
    "\000\002\014\003\000\002\023\002\000\002\015\013\000" +
    "\002\024\002\000\002\015\013\000\002\025\002\000\002" +
    "\015\013\000\002\026\002\000\002\015\013\000\002\027" +
    "\002\000\002\015\013\000\002\030\002\000\002\015\013" +
    "\000\002\031\002\000\002\015\013\000\002\032\002\000" +
    "\002\015\013\000\002\006\004\000\002\006\003\000\002" +
    "\033\002\000\002\011\013\000\002\007\004\000\002\007" +
    "\003\000\002\034\002\000\002\010\013\000\002\035\002" +
    "\000\002\010\013\000\002\036\002\000\002\010\013\000" +
    "\002\037\002\000\002\010\013\000\002\040\002\000\002" +
    "\010\013\000\002\041\002\000\002\005\016\000\002\042" +
    "\002\000\002\005\021\000\002\043\002\000\002\005\023" +
    "\000\002\044\002\000\002\005\016\000\002\045\002\000" +
    "\002\005\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\011\004\001\002\000\004\004\372\001" +
    "\002\000\006\002\000\011\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\004\011\001" +
    "\002\000\004\011\012\001\002\000\004\011\013\001\002" +
    "\000\012\005\023\014\022\026\024\031\021\001\002\000" +
    "\004\011\015\001\002\000\004\004\016\001\002\000\004" +
    "\010\017\001\002\000\004\011\020\001\002\000\006\002" +
    "\uffff\011\uffff\001\002\000\004\011\364\001\002\000\004" +
    "\011\135\001\002\000\004\011\127\001\002\000\004\011" +
    "\025\001\002\000\004\011\026\001\002\000\012\006\037" +
    "\007\035\022\036\027\034\001\002\000\004\011\030\001" +
    "\002\000\004\026\031\001\002\000\004\010\032\001\002" +
    "\000\004\011\033\001\002\000\004\011\ufffc\001\002\000" +
    "\004\006\115\001\002\000\004\006\071\001\002\000\004" +
    "\006\057\001\002\000\004\011\040\001\002\000\004\023" +
    "\041\001\002\000\004\011\042\001\002\000\004\006\043" +
    "\001\002\000\004\010\044\001\002\000\004\011\045\001" +
    "\002\000\004\011\046\001\002\000\004\013\047\001\002" +
    "\000\004\011\050\001\002\000\004\024\051\001\002\000" +
    "\004\011\052\001\002\000\004\013\uffc9\001\002\000\004" +
    "\013\054\001\002\000\004\010\055\001\002\000\004\011" +
    "\056\001\002\000\004\011\uffc8\001\002\000\004\012\060" +
    "\001\002\000\004\023\061\001\002\000\004\011\062\001" +
    "\002\000\004\024\063\001\002\000\004\011\uffc7\001\002" +
    "\000\004\011\065\001\002\000\004\022\066\001\002\000" +
    "\004\010\067\001\002\000\004\011\070\001\002\000\004" +
    "\011\uffc6\001\002\000\004\012\072\001\002\000\004\023" +
    "\073\001\002\000\006\011\075\030\074\001\002\000\004" +
    "\012\104\001\002\000\004\024\076\001\002\000\004\011" +
    "\uffcd\001\002\000\004\011\100\001\002\000\004\007\101" +
    "\001\002\000\004\010\102\001\002\000\004\011\103\001" +
    "\002\000\004\011\uffcc\001\002\000\004\023\105\001\002" +
    "\000\004\011\106\001\002\000\004\024\107\001\002\000" +
    "\004\011\uffcb\001\002\000\004\011\111\001\002\000\004" +
    "\007\112\001\002\000\004\010\113\001\002\000\004\011" +
    "\114\001\002\000\004\011\uffca\001\002\000\004\012\116" +
    "\001\002\000\004\023\117\001\002\000\004\011\120\001" +
    "\002\000\004\024\121\001\002\000\004\011\uffc5\001\002" +
    "\000\004\011\123\001\002\000\004\027\124\001\002\000" +
    "\004\010\125\001\002\000\004\011\126\001\002\000\004" +
    "\011\uffc4\001\002\000\004\011\026\001\002\000\004\011" +
    "\131\001\002\000\004\005\132\001\002\000\004\010\133" +
    "\001\002\000\004\011\134\001\002\000\004\011\ufffd\001" +
    "\002\000\006\011\137\025\ufff6\001\002\000\004\011\356" +
    "\001\002\000\006\026\147\031\243\001\002\000\004\025" +
    "\235\001\002\000\004\011\uffdc\001\002\000\004\011\144" +
    "\001\002\000\004\011\ufff2\001\002\000\006\014\146\026" +
    "\147\001\002\000\004\011\uffdd\001\002\000\004\010\ufffa" +
    "\001\002\000\004\011\150\001\002\000\004\011\151\001" +
    "\002\000\014\015\160\016\162\017\156\020\161\021\157" +
    "\001\002\000\004\011\uffd8\001\002\000\004\011\154\001" +
    "\002\000\016\015\160\016\162\017\156\020\161\021\157" +
    "\026\uffdb\001\002\000\004\011\uffd9\001\002\000\004\011" +
    "\223\001\002\000\004\011\214\001\002\000\004\011\205" +
    "\001\002\000\004\011\176\001\002\000\004\011\167\001" +
    "\002\000\004\026\164\001\002\000\004\010\165\001\002" +
    "\000\004\011\166\001\002\000\004\011\uffda\001\002\000" +
    "\004\023\170\001\002\000\004\011\uffd5\001\002\000\004" +
    "\011\172\001\002\000\004\016\173\001\002\000\004\010" +
    "\174\001\002\000\004\011\175\001\002\000\004\011\uffd4" +
    "\001\002\000\004\025\177\001\002\000\004\011\uffd1\001" +
    "\002\000\004\011\201\001\002\000\004\020\202\001\002" +
    "\000\004\010\203\001\002\000\004\011\204\001\002\000" +
    "\004\011\uffd0\001\002\000\004\023\206\001\002\000\004" +
    "\011\uffd7\001\002\000\004\011\210\001\002\000\004\015" +
    "\211\001\002\000\004\010\212\001\002\000\004\011\213" +
    "\001\002\000\004\011\uffd6\001\002\000\004\023\215\001" +
    "\002\000\004\011\uffcf\001\002\000\004\011\217\001\002" +
    "\000\004\021\220\001\002\000\004\010\221\001\002\000" +
    "\004\011\222\001\002\000\004\011\uffce\001\002\000\004" +
    "\025\224\001\002\000\004\011\uffd3\001\002\000\004\011" +
    "\226\001\002\000\004\017\227\001\002\000\004\010\230" +
    "\001\002\000\004\011\231\001\002\000\004\011\uffd2\001" +
    "\002\000\004\010\233\001\002\000\004\011\234\001\002" +
    "\000\004\011\ufff9\001\002\000\004\011\236\001\002\000" +
    "\004\014\237\001\002\000\004\010\ufff5\001\002\000\004" +
    "\010\241\001\002\000\004\011\242\001\002\000\004\011" +
    "\ufff4\001\002\000\004\011\244\001\002\000\004\011\245" +
    "\001\002\000\022\015\256\017\260\030\257\032\255\033" +
    "\253\034\261\035\254\036\262\001\002\000\004\011\uffee" +
    "\001\002\000\004\011\250\001\002\000\024\015\256\017" +
    "\260\030\257\031\ufff1\032\255\033\253\034\261\035\254" +
    "\036\262\001\002\000\004\011\uffef\001\002\000\004\031" +
    "\353\001\002\000\004\011\344\001\002\000\004\011\335" +
    "\001\002\000\004\011\326\001\002\000\004\011\317\001" +
    "\002\000\004\011\310\001\002\000\004\011\301\001\002" +
    "\000\004\011\272\001\002\000\004\011\263\001\002\000" +
    "\004\023\264\001\002\000\004\011\uffdf\001\002\000\004" +
    "\011\266\001\002\000\004\036\267\001\002\000\004\010" +
    "\270\001\002\000\004\011\271\001\002\000\004\011\uffde" +
    "\001\002\000\004\023\273\001\002\000\004\011\uffe3\001" +
    "\002\000\004\011\275\001\002\000\004\034\276\001\002" +
    "\000\004\010\277\001\002\000\004\011\300\001\002\000" +
    "\004\011\uffe2\001\002\000\004\025\302\001\002\000\004" +
    "\011\uffeb\001\002\000\004\011\304\001\002\000\004\017" +
    "\305\001\002\000\004\010\306\001\002\000\004\011\307" +
    "\001\002\000\004\011\uffea\001\002\000\004\023\311\001" +
    "\002\000\004\011\uffe1\001\002\000\004\011\313\001\002" +
    "\000\004\030\314\001\002\000\004\010\315\001\002\000" +
    "\004\011\316\001\002\000\004\011\uffe0\001\002\000\004" +
    "\023\320\001\002\000\004\011\uffed\001\002\000\004\011" +
    "\322\001\002\000\004\015\323\001\002\000\004\010\324" +
    "\001\002\000\004\011\325\001\002\000\004\011\uffec\001" +
    "\002\000\004\023\327\001\002\000\004\011\uffe9\001\002" +
    "\000\004\011\331\001\002\000\004\032\332\001\002\000" +
    "\004\010\333\001\002\000\004\011\334\001\002\000\004" +
    "\011\uffe8\001\002\000\004\025\336\001\002\000\004\011" +
    "\uffe5\001\002\000\004\011\340\001\002\000\004\035\341" +
    "\001\002\000\004\010\342\001\002\000\004\011\343\001" +
    "\002\000\004\011\uffe4\001\002\000\004\025\345\001\002" +
    "\000\004\011\uffe7\001\002\000\004\011\347\001\002\000" +
    "\004\033\350\001\002\000\004\010\351\001\002\000\004" +
    "\011\352\001\002\000\004\011\uffe6\001\002\000\004\010" +
    "\354\001\002\000\004\011\355\001\002\000\004\011\ufff0" +
    "\001\002\000\006\014\ufff8\031\243\001\002\000\004\011" +
    "\ufff3\001\002\000\004\014\361\001\002\000\004\010\362" +
    "\001\002\000\004\011\363\001\002\000\004\011\ufff7\001" +
    "\002\000\004\011\026\001\002\000\004\011\366\001\002" +
    "\000\004\031\367\001\002\000\004\010\370\001\002\000" +
    "\004\011\371\001\002\000\004\011\ufffb\001\002\000\004" +
    "\011\373\001\002\000\004\011\013\001\002\000\004\011" +
    "\375\001\002\000\004\004\376\001\002\000\004\010\377" +
    "\001\002\000\004\011\u0100\001\002\000\006\002\ufffe\011" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\141\011\140\012\135" +
    "\013\142\020\137\001\001\000\004\013\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\231\001\001\000\002\001\001" +
    "\000\006\007\152\010\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\154\001\001\000\004\033\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\246\015\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\250\001\001\000\004\022\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCli$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCli$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCli$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
     //   Inicio.lisErrores.add("Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+" Se esperaba otro token\n");       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCli$actions {

//Codigo de usuario
    String tmp="";

  private final parserCli parser;

  /** Constructor */
  CUP$parserCli$actions(parserCli parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCli$do_action(
    int                        CUP$parserCli$act_num,
    java_cup.runtime.lr_parser CUP$parserCli$parser,
    java.util.Stack            CUP$parserCli$stack,
    int                        CUP$parserCli$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCli$result;

      /* select the action based on the action number */
      switch (CUP$parserCli$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAUSER ::= Tkn_dolar Tkn_eliminar Tkn_ide Tkn_igual Tkn_entero Tkn_dolar Tkn_id NT$23 Tkn_dolar Tkn_eliminar Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAUSER",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-11)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$23 ::= 
            {
              Object RESULT =null;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;

                                                                                        Registro.SeElimino(valent,val);
                                                                                     
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$23",35, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAUSER ::= Tkn_dolar Tkn_modificar Tkn_ide Tkn_igual Tkn_entero Tkn_dolar Tkn_id NT$22 Tkn_dolar Tkn_modificar Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAUSER",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-11)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$22 ::= 
            {
              Object RESULT =null;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;

                                                                                        Registro.Semodifico(valent,val);
                                                                                     
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$22",34, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAUSER ::= Tkn_dolar Tkn_ide Tkn_dolar Tkn_entero Tkn_dolar Tkn_ide Tkn_menos Tkn_dolar Tkn_dolar Tkn_access Tkn_dolar Tkn_id Tkn_dolar NT$21 Tkn_access Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;
		int valeleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-13)).left;
		int valeright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-13)).right;
		String vale = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-13)).value;
		int validleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int validright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String valid = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAUSER",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-16)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$21 ::= 
            {
              Object RESULT =null;
		int valeleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-9)).left;
		int valeright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-9)).right;
		String vale = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-9)).value;
		int validleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).left;
		int validright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).right;
		String valid = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;

                                                                                                                                                                    Registro.Ingresara(vale,valid);
                                                                                                                                                                  
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$21",33, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAUSER ::= Tkn_dolar Tkn_registro Tkn_ide Tkn_igual Tkn_entero Tkn_sucursal Tkn_igual Tkn_entero Tkn_dolar Tkn_id NT$20 Tkn_dolar Tkn_registro Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-10)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-10)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-10)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAUSER",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-14)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$20 ::= 
            {
              Object RESULT =null;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;

                                                                                      Registro.Seregistro(valent, valu);
                                                                                     
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$20",32, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAUSER ::= Tkn_dolar Tkn_registro Tkn_ide Tkn_igual Tkn_entero Tkn_dolar Tkn_id NT$19 Tkn_dolar Tkn_registro Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAUSER",3, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-11)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$19 ::= 
            {
              Object RESULT =null;
		int valentleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).left;
		int valentright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).right;
		String valent = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;

                                                                                      Registro.Seregistro(valent, valu);
                                                                                     
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$19",31, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTOTIENDAFINAL ::= Tkn_dolar Tkn_telefono Tkn_dolar Tkn_entero NT$18 Tkn_dolar Tkn_telefono Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int telleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String tel = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDAFINAL",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$18 ::= 
            {
              Object RESULT =null;
		int telleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int telright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String tel = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arr[4]=tel;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$18",30, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIBUTOTIENDAFINAL ::= Tkn_dolar Tkn_direccion Tkn_dolar Tkn_cadena NT$17 Tkn_dolar Tkn_direccion Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int direleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int direright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String dire = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDAFINAL",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$17 ::= 
            {
              Object RESULT =null;
		int direleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int direright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String dire = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arr[3]=dire;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$17",29, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATRIBUTOTIENDAFINAL ::= Tkn_dolar Tkn_nombre Tkn_dolar Tkn_cadena NT$16 Tkn_dolar Tkn_nombre Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDAFINAL",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$16 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arr[2]=nom;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$16",28, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ATRIBUTOTIENDAFINAL ::= Tkn_dolar Tkn_propietario Tkn_dolar Tkn_entero NT$15 Tkn_dolar Tkn_propietario Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int propieleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int propieright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String propie = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDAFINAL",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$15 ::= 
            {
              Object RESULT =null;
		int propieleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int propieright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String propie = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arr[1]=propie;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$15",27, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATRIBUTOTIENDAFINAL ::= Tkn_dolar Tkn_codigo Tkn_dolar Tkn_entero NT$14 Tkn_dolar Tkn_codigo Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int codileft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int codiright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String codi = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDAFINAL",6, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$14 ::= 
            {
              Object RESULT =null;
		int codileft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int codiright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String codi = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arr[0]=codi;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$14",26, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATRIBUTOTIENDA ::= ATRIBUTOTIENDAFINAL 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDA",5, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ATRIBUTOTIENDA ::= ATRIBUTOTIENDA ATRIBUTOTIENDAFINAL 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOTIENDA",5, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIENDA ::= Tkn_dolar Tkn_tienda Tkn_dolar ATRIBUTOTIENDA Tkn_dolar NT$13 Tkn_tienda Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("TIENDA",7, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$13 ::= 
            {
              Object RESULT =null;

                                                                            Registro.listTiendas.add(new Panel(Registro.arr[0],Registro.arr[1],Registro.arr[2],Registro.arr[3],Registro.arr[4]));
                                                                            for(String st:Registro.arr)
                                                                                st="";
                                                                            
                                                                 
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$13",25, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTATIENDA ::= TIENDA 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTATIENDA",4, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTATIENDA ::= LISTATIENDA TIENDA 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTATIENDA",4, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_precio Tkn_dolar Tkn_entero NT$12 Tkn_dolar Tkn_precio Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String tam = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              Object RESULT =null;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String tam = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[7]=tam;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$12",24, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_sucursal Tkn_dolar Tkn_entero NT$11 Tkn_dolar Tkn_sucursal Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int suculeft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int sucuright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String sucu = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              Object RESULT =null;
		int suculeft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int sucuright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String sucu = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[6]=sucu;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$11",23, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_tamaño Tkn_dolar Tkn_entero NT$10 Tkn_dolar Tkn_tamaño Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String tam = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$10 ::= 
            {
              Object RESULT =null;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String tam = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[5]=tam;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$10",22, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_color Tkn_dolar Tkn_cadena NT$9 Tkn_dolar Tkn_color Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int cololeft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int coloright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String colo = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$9 ::= 
            {
              Object RESULT =null;
		int cololeft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int coloright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String colo = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[4]=colo;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$9",21, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_marca Tkn_dolar Tkn_cadena NT$8 Tkn_dolar Tkn_marca Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int marleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int marright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String mar = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$8 ::= 
            {
              Object RESULT =null;
		int marleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int marright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String mar = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[3]=mar;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$8",20, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_cantidad Tkn_dolar Tkn_entero NT$7 Tkn_dolar Tkn_cantidad Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int cantileft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int cantiright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String canti = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$7 ::= 
            {
              Object RESULT =null;
		int cantileft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int cantiright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String canti = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[2]=canti;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$7",19, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_nombre Tkn_dolar Tkn_cadena NT$6 Tkn_dolar Tkn_nombre Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$6 ::= 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[1]=nom;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$6",18, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUTOPRODUCTOFINAL ::= Tkn_dolar Tkn_codigo Tkn_dolar Tkn_entero NT$5 Tkn_dolar Tkn_codigo Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-4)).value;
		int codileft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int codiright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String codi = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTOFINAL",11, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$5 ::= 
            {
              Object RESULT =null;
		int codileft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).left;
		int codiright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()).right;
		String codi = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.peek()).value;
Registro.arrr[0]=codi;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$5",17, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTOPRODUCTO ::= ATRIBUTOPRODUCTOFINAL 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTO",10, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTOPRODUCTO ::= ATRIBUTOPRODUCTO ATRIBUTOPRODUCTOFINAL 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("ATRIBUTOPRODUCTO",10, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PRODUCTO ::= Tkn_dolar Tkn_producto Tkn_dolar ATRIBUTOPRODUCTO Tkn_dolar NT$4 Tkn_producto Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("PRODUCTO",9, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;

                                                                            Registro.listProductos.add(new PanelProducto(Registro.arrr[0],Registro.arrr[1],Registro.arrr[2],Registro.arrr[3],Registro.arrr[4],Registro.arrr[5],Registro.arrr[6],Registro.arrr[7]));
                                                                            for(String st:Registro.arrr)
                                                                                st="";
                                                                            
                                                                 
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$4",16, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAPRODUCTO ::= PRODUCTO 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTAPRODUCTO",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAPRODUCTO ::= LISTAPRODUCTO PRODUCTO 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("LISTAPRODUCTO",8, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAINTERIORREPLY ::= Tkn_dolar Tkn_lista Tkn_dolar NT$2 Tkn_cadena Tkn_dolar Tkn_lista NT$3 Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-5)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIORREPLY",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-9)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;

                                                                                                                                if(cad.equalsIgnoreCase("vacio"))new InicioCliente("").setVisible(true);
                                                                                                                                    else new Productos("").setVisible(true);
                                                                                                                                 
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$3",15, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
Registro.listTiendas.clear();   
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$2",14, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAINTERIORREPLY ::= Tkn_dolar Tkn_lista Tkn_dolar LISTAPRODUCTO Tkn_dolar NT$1 Tkn_lista Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-3)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIORREPLY",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
new Productos("").setVisible(true);Registro.listProductos.clear(); 
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$1",13, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAINTERIORREPLY ::= Tkn_dolar Tkn_lista Tkn_dolar LISTATIENDA Tkn_dolar Tkn_lista NT$0 Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-2)).value;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIORREPLY",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
new InicioCliente("").setVisible(true);Registro.listTiendas.clear();
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAINTERIORREPLY ::= Tkn_dolar Tkn_producto Tkn_dolar SENTENCIAUSER Tkn_dolar Tkn_producto Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIORREPLY",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAINTERIORREPLY ::= Tkn_dolar Tkn_tienda Tkn_dolar SENTENCIAUSER Tkn_dolar Tkn_tienda Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIORREPLY",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAINTERIORREPLY ::= Tkn_dolar Tkn_Usuario Tkn_dolar SENTENCIAUSER Tkn_dolar Tkn_Usuario Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIORREPLY",2, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= Tkn_dolar Tkn_reply Tkn_dolar SENTENCIAINTERIORREPLY Tkn_dolar Tkn_reply Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-7)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S Tkn_dolar Tkn_reply Tkn_dolar SENTENCIAINTERIORREPLY Tkn_dolar Tkn_reply Tkn_menos Tkn_dolar 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-8)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              Object RESULT =null;

              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          return CUP$parserCli$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)).value;
		RESULT = start_val;
              CUP$parserCli$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCli$stack.elementAt(CUP$parserCli$top-1)), ((java_cup.runtime.Symbol)CUP$parserCli$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCli$parser.done_parsing();
          return CUP$parserCli$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

