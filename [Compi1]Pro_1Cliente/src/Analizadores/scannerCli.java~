/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java.util.LinkedList;


import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class scannerCli implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 29, 30, 32, 29, 29,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    29,  0, 31,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0, 14, 24,  0, 
    23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0, 16,  0,  0, 
    28,  8, 20, 17, 11,  2, 21, 12, 25, 27, 25, 25,  4, 19, 18, 10, 
     3, 25,  1, 26, 13,  6, 25, 25, 25,  5, 25,  0,  0,  0,  0, 28, 
     0,  8, 20, 17, 11,  2, 21, 12, 25, 27, 25, 25,  4, 19, 18, 10, 
     3, 25,  1, 26, 13,  6, 25, 25, 25,  5, 25,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 32,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 25,  0,  0,  0,  0,  0,  0,  0, 25,  0,  0,  0, 25,  0,  0, 
     0, 22,  0, 25,  0,  0,  0,  0,  0,  0, 25,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\6\2\1\1\1\2\1\1\2\2\1\3"+
    "\1\4\1\5\3\2\1\6\2\2\1\7\1\10\1\11"+
    "\1\12\1\13\3\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\14\1\0\3\2\1\0\6\2\1\0\1\2"+
    "\1\14\2\2\1\0\2\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\3\2\1\0\7\2\1\6\2\2"+
    "\1\0\1\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\3\2\1\0\3\2\1\0\3\2"+
    "\1\0\2\2\1\15\1\0\1\2\1\0\1\2\1\0"+
    "\2\2\2\16\1\0\1\2\2\0\1\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\1\17\1\0\2\2\1\20"+
    "\1\0\2\2\1\0\1\2\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\1\0\2\21\1\0\2\2\1\22\2\23"+
    "\1\0\1\2\2\24\1\25\1\0\2\2\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\2\26\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\2\27\2\30\1\0\1\2\1\31"+
    "\1\32\1\0\1\2\1\33\2\34\1\0\1\2\1\32"+
    "\1\0\1\2\2\35\2\36\1\0\1\2\2\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\102\0\102"+
    "\0\102\0\u01ce\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\102"+
    "\0\102\0\102\0\102\0\102\0\u0294\0\u02b5\0\u02d6\0\u02f7"+
    "\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\102\0\u03bd\0\u03de"+
    "\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6"+
    "\0\u0507\0\u0528\0\u0549\0\347\0\u056a\0\u058b\0\u05ac\0\u05cd"+
    "\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5"+
    "\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd"+
    "\0\u07fe\0\u081f\0\u0840\0\u0528\0\u0861\0\u0882\0\u08a3\0\u08c4"+
    "\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc"+
    "\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4"+
    "\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc"+
    "\0\u0bfd\0\347\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3"+
    "\0\u0ce4\0\102\0\347\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89"+
    "\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91"+
    "\0\347\0\u0eb2\0\u0ed3\0\u0ef4\0\347\0\u0f15\0\u0f36\0\u0f57"+
    "\0\u0f78\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\u105f"+
    "\0\u1080\0\u10a1\0\102\0\347\0\u10c2\0\u10e3\0\u1104\0\347"+
    "\0\102\0\347\0\u1125\0\u1146\0\102\0\347\0\347\0\u1167"+
    "\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e\0\u126f"+
    "\0\u1290\0\102\0\347\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335"+
    "\0\u1356\0\u1377\0\u1398\0\u13b9\0\102\0\347\0\102\0\347"+
    "\0\u13da\0\u13fb\0\347\0\102\0\u141c\0\u143d\0\347\0\102"+
    "\0\347\0\u145e\0\u147f\0\347\0\u14a0\0\u14c1\0\102\0\347"+
    "\0\102\0\347\0\u14e2\0\u1503\0\102\0\347";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\10\1\15\1\10\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\10\1\25\1\3\1\10"+
    "\1\26\1\27\1\3\2\30\1\31\1\0\36\32\1\33"+
    "\1\34\1\32\42\0\1\10\1\35\4\10\1\0\1\10"+
    "\1\0\4\10\3\0\14\10\5\0\3\10\1\36\2\10"+
    "\1\0\1\10\1\0\4\10\3\0\14\10\5\0\1\37"+
    "\5\10\1\0\1\10\1\0\4\10\3\0\14\10\5\0"+
    "\6\10\1\0\1\10\1\40\4\10\3\0\12\10\1\41"+
    "\1\10\5\0\6\10\1\0\1\10\1\0\4\10\3\0"+
    "\14\10\5\0\6\10\1\42\1\10\1\0\4\10\3\0"+
    "\11\10\1\43\2\10\12\0\1\44\33\0\6\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\45\13\10\17\0\1\46"+
    "\26\0\6\10\1\0\1\10\1\47\4\10\3\0\12\10"+
    "\1\50\1\10\5\0\1\10\1\51\4\10\1\0\1\52"+
    "\1\53\4\10\3\0\12\10\1\54\1\10\5\0\6\10"+
    "\1\0\1\55\1\0\1\56\3\10\3\0\14\10\5\0"+
    "\6\10\1\0\1\10\1\0\1\57\3\10\3\0\14\10"+
    "\5\0\6\10\1\0\1\60\1\0\1\61\3\10\3\0"+
    "\14\10\33\0\1\25\1\62\11\0\5\10\1\63\1\0"+
    "\1\10\1\0\4\10\3\0\14\10\5\0\6\10\1\0"+
    "\1\10\1\0\1\10\1\64\2\10\3\0\14\10\5\0"+
    "\2\10\1\65\3\10\1\0\1\10\1\0\2\10\1\66"+
    "\1\10\3\0\14\10\5\0\6\10\1\0\1\10\1\67"+
    "\4\10\3\0\12\10\1\70\1\10\5\0\6\10\1\0"+
    "\1\10\1\0\1\71\3\10\3\0\14\10\13\0\1\72"+
    "\22\0\1\72\7\0\6\10\1\72\1\10\1\0\4\10"+
    "\3\0\11\10\1\73\2\10\12\0\1\74\33\0\5\10"+
    "\1\75\1\0\1\10\1\0\4\10\3\0\14\10\25\0"+
    "\1\76\20\0\6\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\77\13\10\5\0\1\100\40\0\1\101\5\10\1\0"+
    "\1\10\1\0\4\10\3\0\14\10\5\0\3\10\1\102"+
    "\2\10\1\0\1\10\1\0\4\10\3\0\14\10\5\0"+
    "\6\10\1\0\1\10\1\0\4\10\3\0\2\10\1\103"+
    "\11\10\6\0\1\104\37\0\1\10\1\105\4\10\1\0"+
    "\1\10\1\0\4\10\3\0\14\10\5\0\6\10\1\0"+
    "\1\10\1\0\4\10\3\0\1\10\1\106\12\10\5\0"+
    "\3\10\1\107\2\10\1\0\1\10\1\0\1\10\1\110"+
    "\2\10\3\0\14\10\5\0\6\10\1\0\1\10\1\0"+
    "\4\10\3\0\2\10\1\111\11\10\5\0\1\112\5\10"+
    "\1\0\1\10\1\0\4\10\3\0\14\10\5\0\6\10"+
    "\1\0\1\10\1\0\1\10\1\113\2\10\3\0\14\10"+
    "\33\0\1\114\12\0\6\10\1\0\1\10\1\0\4\10"+
    "\3\0\1\115\13\10\5\0\3\10\1\116\2\10\1\0"+
    "\1\10\1\0\4\10\3\0\14\10\5\0\6\10\1\0"+
    "\1\10\1\117\4\10\3\0\12\10\1\120\1\10\27\0"+
    "\1\121\16\0\6\10\1\0\1\10\1\0\4\10\3\0"+
    "\2\10\1\122\11\10\5\0\2\10\1\123\3\10\1\0"+
    "\1\10\1\0\1\10\1\124\2\10\3\0\14\10\21\0"+
    "\1\125\24\0\6\10\1\0\1\10\1\0\3\10\1\126"+
    "\3\0\14\10\14\0\1\127\31\0\6\10\1\0\1\130"+
    "\1\0\4\10\3\0\14\10\12\0\1\131\33\0\1\10"+
    "\1\132\4\10\1\0\1\10\1\0\4\10\3\0\14\10"+
    "\6\0\1\133\37\0\1\10\1\134\4\10\1\0\1\10"+
    "\1\0\4\10\3\0\14\10\5\0\1\10\1\135\4\10"+
    "\1\0\1\10\1\0\4\10\3\0\14\10\5\0\6\10"+
    "\1\0\1\136\1\0\4\10\3\0\14\10\26\0\1\137"+
    "\17\0\6\10\1\0\1\10\1\0\4\10\3\0\1\10"+
    "\1\140\12\10\5\0\6\10\1\0\1\10\1\0\3\10"+
    "\1\141\3\0\14\10\5\0\6\10\1\0\1\10\1\0"+
    "\1\142\3\10\3\0\14\10\5\0\6\10\1\0\1\10"+
    "\1\143\4\10\3\0\12\10\1\144\1\10\5\0\6\10"+
    "\1\0\1\10\1\0\4\10\3\0\3\10\1\145\10\10"+
    "\5\0\6\10\1\0\1\10\1\0\4\10\3\0\1\146"+
    "\13\10\5\0\6\10\1\0\1\10\1\147\4\10\3\0"+
    "\12\10\1\150\1\10\5\0\5\10\1\151\1\0\1\10"+
    "\1\0\4\10\3\0\14\10\5\0\4\10\1\152\1\10"+
    "\1\0\1\10\1\0\4\10\3\0\14\10\13\0\1\153"+
    "\22\0\1\153\7\0\6\10\1\153\1\10\1\0\4\10"+
    "\3\0\11\10\1\154\2\10\15\0\1\155\21\0\1\155"+
    "\6\0\6\10\1\0\1\10\1\155\4\10\3\0\12\10"+
    "\1\156\1\10\5\0\6\10\1\0\1\10\1\157\4\10"+
    "\3\0\12\10\1\160\1\10\5\0\5\10\1\161\1\0"+
    "\1\10\1\0\4\10\3\0\14\10\14\0\1\162\31\0"+
    "\6\10\1\0\1\163\1\0\4\10\3\0\14\10\5\0"+
    "\1\164\40\0\1\165\5\10\1\0\1\10\1\0\4\10"+
    "\3\0\14\10\5\0\1\166\40\0\6\10\1\167\1\10"+
    "\1\0\4\10\3\0\11\10\1\170\2\10\25\0\1\171"+
    "\20\0\6\10\1\0\1\10\1\0\4\10\3\0\1\172"+
    "\13\10\5\0\6\10\1\0\1\10\1\0\4\10\3\0"+
    "\4\10\1\173\7\10\5\0\6\10\1\0\1\10\1\0"+
    "\4\10\3\0\5\10\1\174\6\10\17\0\1\175\26\0"+
    "\6\10\1\0\1\10\1\0\1\10\1\176\2\10\3\0"+
    "\14\10\5\0\6\10\1\0\1\10\1\177\4\10\3\0"+
    "\12\10\1\200\1\10\5\0\1\201\5\10\1\0\1\10"+
    "\1\0\4\10\3\0\14\10\20\0\1\202\25\0\6\10"+
    "\1\0\1\10\1\0\2\10\1\203\1\10\3\0\14\10"+
    "\5\0\1\204\5\10\1\0\1\10\1\0\4\10\3\0"+
    "\14\10\5\0\6\10\1\0\1\205\1\0\4\10\3\0"+
    "\14\10\31\0\1\206\14\0\6\10\1\0\1\10\1\0"+
    "\4\10\3\0\4\10\1\207\7\10\5\0\1\210\5\10"+
    "\1\0\1\10\1\0\4\10\3\0\14\10\21\0\1\211"+
    "\24\0\6\10\1\0\1\10\1\0\3\10\1\212\3\0"+
    "\14\10\26\0\1\213\17\0\6\10\1\0\1\10\1\0"+
    "\4\10\3\0\1\10\1\214\12\10\6\0\1\215\37\0"+
    "\1\10\1\216\4\10\1\0\1\10\1\0\4\10\3\0"+
    "\14\10\5\0\6\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\217\13\10\15\0\1\220\21\0\1\220\6\0\6\10"+
    "\1\0\1\10\1\220\4\10\3\0\12\10\1\221\1\10"+
    "\13\0\1\222\22\0\1\222\15\0\1\223\22\0\1\223"+
    "\7\0\6\10\1\223\1\10\1\0\4\10\3\0\11\10"+
    "\1\224\2\10\25\0\1\225\20\0\6\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\226\13\10\5\0\6\10\1\0"+
    "\1\10\1\0\1\227\3\10\3\0\14\10\5\0\6\10"+
    "\1\0\1\10\1\0\1\230\3\10\3\0\14\10\14\0"+
    "\1\231\31\0\6\10\1\0\1\232\1\0\4\10\3\0"+
    "\14\10\17\0\1\233\26\0\6\10\1\0\1\10\1\0"+
    "\1\10\1\234\2\10\3\0\14\10\16\0\1\235\27\0"+
    "\6\10\1\0\1\10\1\0\1\236\3\10\3\0\14\10"+
    "\5\0\1\10\1\237\4\10\1\0\1\10\1\0\4\10"+
    "\3\0\14\10\15\0\1\240\21\0\1\240\6\0\6\10"+
    "\1\0\1\10\1\240\4\10\3\0\12\10\1\241\1\10"+
    "\5\0\6\10\1\222\1\10\1\0\4\10\3\0\11\10"+
    "\1\242\2\10\5\0\1\243\40\0\1\244\5\10\1\0"+
    "\1\10\1\0\4\10\3\0\14\10\14\0\1\245\31\0"+
    "\6\10\1\0\1\246\1\0\4\10\3\0\14\10\21\0"+
    "\1\247\24\0\6\10\1\0\1\10\1\0\3\10\1\250"+
    "\3\0\14\10\5\0\6\10\1\0\1\10\1\0\3\10"+
    "\1\251\3\0\14\10\16\0\1\252\27\0\6\10\1\0"+
    "\1\10\1\0\1\253\3\10\3\0\14\10\14\0\1\254"+
    "\41\0\1\255\21\0\1\255\6\0\6\10\1\0\1\10"+
    "\1\255\4\10\3\0\12\10\1\256\1\10\5\0\6\10"+
    "\1\0\1\10\1\0\4\10\3\0\1\10\1\257\12\10"+
    "\14\0\1\260\31\0\6\10\1\0\1\261\1\0\4\10"+
    "\3\0\14\10\25\0\1\262\20\0\6\10\1\0\1\10"+
    "\1\0\4\10\3\0\1\263\13\10\5\0\6\10\1\0"+
    "\1\264\1\0\4\10\3\0\14\10\16\0\1\265\27\0"+
    "\6\10\1\0\1\10\1\0\1\266\3\10\3\0\14\10"+
    "\5\0\1\267\40\0\1\270\5\10\1\0\1\10\1\0"+
    "\4\10\3\0\14\10\14\0\1\271\31\0\6\10\1\0"+
    "\1\272\1\0\4\10\3\0\14\10\5\0\6\10\1\0"+
    "\1\10\1\0\1\273\3\10\3\0\14\10\10\0\1\274"+
    "\46\0\1\275\27\0\6\10\1\0\1\10\1\0\1\276"+
    "\3\10\3\0\14\10\5\0\6\10\1\0\1\10\1\0"+
    "\1\277\3\10\3\0\14\10\17\0\1\300\26\0\6\10"+
    "\1\0\1\10\1\0\1\10\1\301\2\10\3\0\14\10"+
    "\14\0\1\302\31\0\6\10\1\0\1\303\1\0\4\10"+
    "\3\0\14\10\5\0\3\10\1\304\2\10\1\0\1\10"+
    "\1\0\4\10\3\0\14\10\5\0\1\305\40\0\1\306"+
    "\5\10\1\0\1\10\1\0\4\10\3\0\14\10\26\0"+
    "\1\307\17\0\6\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\10\1\310\12\10\5\0\1\311\40\0\1\312\5\10"+
    "\1\0\1\10\1\0\4\10\3\0\14\10\15\0\1\313"+
    "\21\0\1\313\6\0\6\10\1\0\1\10\1\313\4\10"+
    "\3\0\12\10\1\314\1\10\16\0\1\315\27\0\6\10"+
    "\1\0\1\10\1\0\1\316\3\10\3\0\14\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5412];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\13\1\3\11\6\1\5\11\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\0\3\1"+
    "\1\0\6\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\12\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\2\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\11\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\2\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\11\1\1\1\0"+
    "\2\1\1\11\1\0\2\1\1\11\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena= "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCli(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Inicio.lisErrores.add("Error léxico : Lexema"+yytext()+", Línea: "+(yyline+1)+"Columna: "+yycolumn+" El caracter No pertenece al lenguaje\n");
            }
          case 32: break;
          case 2: 
            { return new Symbol(sym.Tkn_id, yyline, yycolumn,yytext());
            }
          case 33: break;
          case 3: 
            { return new Symbol(sym.Tkn_menos, yyline, yycolumn,yytext());
            }
          case 34: break;
          case 4: 
            { return new Symbol(sym.Tkn_dolar, yyline, yycolumn,yytext());
            }
          case 35: break;
          case 5: 
            { return new Symbol(sym.Tkn_igual, yyline, yycolumn,yytext());
            }
          case 36: break;
          case 6: 
            { return new Symbol(sym.Tkn_entero, yyline, yycolumn,yytext());
            }
          case 37: break;
          case 7: 
            { 
            }
          case 38: break;
          case 8: 
            { yybegin(CADENA); cadena="";
            }
          case 39: break;
          case 9: 
            { cadena+=yytext();
            }
          case 40: break;
          case 10: 
            { String tmp=cadena; cadena="";  
               // Inicio.lisErrores.add("Error léxico : Lexema"+"Salto de linea"+", Línea: "+(yyline+1)+"Columna: "+yycolumn+" Se esperaba \" \n");       
                yybegin(YYINITIAL);
            }
          case 41: break;
          case 11: 
            { String tmp=cadena; cadena="";
               yybegin(YYINITIAL); 
               return new Symbol(sym.Tkn_cadena, yyline,yycolumn,tmp);
            }
          case 42: break;
          case 12: 
            { return new Symbol(sym.Tkn_ide, yyline, yycolumn,yytext());
            }
          case 43: break;
          case 13: 
            { return new Symbol(sym.Tkn_reply, yyline, yycolumn,yytext());
            }
          case 44: break;
          case 14: 
            { return new Symbol(sym.Tkn_lista, yyline, yycolumn,yytext());
            }
          case 45: break;
          case 15: 
            { return new Symbol(sym.Tkn_color, yyline, yycolumn,yytext());
            }
          case 46: break;
          case 16: 
            { return new Symbol(sym.Tkn_marca, yyline, yycolumn,yytext());
            }
          case 47: break;
          case 17: 
            { return new Symbol(sym.Tkn_access, yyline, yycolumn,yytext());
            }
          case 48: break;
          case 18: 
            { return new Symbol(sym.Tkn_tamaño, yyline, yycolumn,yytext());
            }
          case 49: break;
          case 19: 
            { return new Symbol(sym.Tkn_tienda, yyline, yycolumn,yytext());
            }
          case 50: break;
          case 20: 
            { return new Symbol(sym.Tkn_codigo, yyline, yycolumn,yytext());
            }
          case 51: break;
          case 21: 
            { return new Symbol(sym.Tkn_nombre, yyline, yycolumn,yytext());
            }
          case 52: break;
          case 22: 
            { return new Symbol(sym.Tkn_Usuario, yyline, yycolumn,yytext());
            }
          case 53: break;
          case 23: 
            { return new Symbol(sym.Tkn_registro, yyline, yycolumn,yytext());
            }
          case 54: break;
          case 24: 
            { return new Symbol(sym.Tkn_eliminar, yyline, yycolumn,yytext());
            }
          case 55: break;
          case 25: 
            { return new Symbol(sym.Tkn_producto, yyline, yycolumn,yytext());
            }
          case 56: break;
          case 26: 
            { return new Symbol(sym.Tkn_sucursal, yyline, yycolumn,yytext());
            }
          case 57: break;
          case 27: 
            { return new Symbol(sym.Tkn_telefono, yyline, yycolumn,yytext());
            }
          case 58: break;
          case 28: 
            { return new Symbol(sym.Tkn_cantidad, yyline, yycolumn,yytext());
            }
          case 59: break;
          case 29: 
            { return new Symbol(sym.Tkn_direccion, yyline, yycolumn,yytext());
            }
          case 60: break;
          case 30: 
            { return new Symbol(sym.Tkn_modificar, yyline, yycolumn,yytext());
            }
          case 61: break;
          case 31: 
            { return new Symbol(sym.Tkn_propietario, yyline, yycolumn,yytext());
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
