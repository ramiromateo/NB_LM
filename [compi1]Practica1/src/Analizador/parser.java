
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 17 18:44:29 GMT-12:00 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import c1.practica1.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 17 18:44:29 GMT-12:00 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\005\000\002\003\004\000\002\010\005" +
    "\000\002\010\010\000\002\010\010\000\002\010\005\000" +
    "\002\010\010\000\002\010\010\000\002\016\002\000\002" +
    "\010\006\000\002\010\010\000\002\004\006\000\002\004" +
    "\005\000\002\006\004\000\002\006\003\000\002\012\004" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\007" +
    "\007\000\002\007\004\000\002\015\003\000\002\015\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\003\004\020\006\001\002\000\004\020" +
    "\177\001\002\000\006\002\000\020\176\001\002\000\020" +
    "\012\017\013\020\014\014\015\013\016\015\017\016\043" +
    "\011\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\043\171\001\002\000\004\021\170\001" +
    "\002\000\004\021\163\001\002\000\022\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\025\ufff6\043\ufff6\001" +
    "\002\000\004\021\115\001\002\000\004\021\110\001\002" +
    "\000\036\003\070\025\022\027\067\030\072\031\063\032" +
    "\065\033\064\034\062\035\021\036\031\037\024\040\025" +
    "\041\030\043\026\001\002\000\022\021\032\025\022\035" +
    "\021\036\031\037\024\040\025\041\030\043\026\001\002" +
    "\000\004\023\060\001\002\000\040\003\uffdd\022\uffdd\025" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\001" +
    "\002\000\022\022\056\025\022\035\021\036\031\037\024" +
    "\040\025\041\030\043\026\001\002\000\004\023\054\001" +
    "\002\000\004\023\052\001\002\000\004\023\047\001\002" +
    "\000\022\022\ufff0\025\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\043\ufff0\001\002\000\004\023\045\001\002" +
    "\000\004\023\041\001\002\000\006\003\004\020\006\001" +
    "\002\000\004\020\034\001\002\000\022\012\017\013\020" +
    "\014\014\015\013\016\015\017\016\022\035\043\011\001" +
    "\002\000\004\013\040\001\002\000\004\021\037\001\002" +
    "\000\006\002\uffff\020\uffff\001\002\000\004\021\ufffa\001" +
    "\002\000\006\042\044\044\043\001\002\000\040\003\uffdf" +
    "\022\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\001\002\000\054\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\022\uffd5\025\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\001\002\000\054" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\022\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\043\uffd6\001\002\000\004\043\046\001\002\000\040" +
    "\003\uffda\022\uffda\025\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\043\uffda\001\002\000\010\042\044\043\050\044" +
    "\043\001\002\000\040\003\uffd9\022\uffd9\025\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\001\002\000\040" +
    "\003\uffde\022\uffde\025\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\043\uffde\001\002\000\004\043\053\001\002\000" +
    "\040\003\uffdb\022\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\043\uffdb\001\002\000\006\042\044\044\043" +
    "\001\002\000\040\003\uffdc\022\uffdc\025\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\043\uffdc\001\002\000\004\021" +
    "\ufff9\001\002\000\022\022\ufff1\025\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\043\ufff1\001\002\000\006\042" +
    "\044\044\043\001\002\000\040\003\uffe0\022\uffe0\025\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\043\uffe0\001\002" +
    "\000\042\003\uffcf\022\uffcf\024\uffcf\025\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\043\uffcf\001\002\000\042\003" +
    "\uffd2\022\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\001\002\000\042\003\uffd0\022\uffd0" +
    "\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\043\uffd0\001\002\000\042\003\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\001" +
    "\002\000\004\024\104\001\002\000\042\003\uffd4\022\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\043\uffd4\001\002\000\020\003\076\027\067\030\072\031" +
    "\063\032\065\033\064\034\062\001\002\000\040\003\uffe3" +
    "\022\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\043\uffe3\001\002\000\042\003\uffd3\022\uffd3\024\uffd3\025" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\001" +
    "\002\000\040\003\uffe2\022\uffe2\025\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\043\uffe2\001\002\000\040\003\076" +
    "\022\075\025\022\027\067\030\072\031\063\032\065\033" +
    "\064\034\062\035\021\036\031\037\024\040\025\041\030" +
    "\043\026\001\002\000\004\021\ufffc\001\002\000\016\027" +
    "\067\030\072\031\063\032\065\033\064\034\062\001\002" +
    "\000\040\003\uffe5\022\uffe5\025\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\043\uffe5\001\002\000\040\003\uffe4\022" +
    "\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043" +
    "\uffe4\001\002\000\040\003\uffd7\022\uffd7\025\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\001\002\000\042" +
    "\003\uffd7\022\uffd7\024\104\025\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\043\uffd7\001\002\000\040\003\uffe1\022" +
    "\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\001\002\000\004\043\105\001\002\000\004\023\106" +
    "\001\002\000\006\042\044\044\043\001\002\000\040\003" +
    "\uffd8\022\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\043\uffd8\001\002\000\006\003\004\020\006\001\002" +
    "\000\004\020\112\001\002\000\022\012\017\013\020\014" +
    "\014\015\013\016\015\017\016\022\113\043\011\001\002" +
    "\000\004\017\114\001\002\000\004\021\ufffb\001\002\000" +
    "\004\043\116\001\002\000\004\023\126\001\002\000\006" +
    "\020\121\043\120\001\002\000\004\023\124\001\002\000" +
    "\004\022\122\001\002\000\004\016\123\001\002\000\004" +
    "\021\ufff7\001\002\000\004\043\125\001\002\000\006\020" +
    "\ufff3\043\ufff3\001\002\000\004\043\127\001\002\000\006" +
    "\020\ufff2\043\ufff2\001\002\000\022\004\137\005\141\006" +
    "\135\007\132\010\131\011\136\025\133\043\140\001\002" +
    "\000\004\023\161\001\002\000\004\023\157\001\002\000" +
    "\024\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\022\uffec\025\uffec\043\uffec\001\002\000\024\004\137\005" +
    "\141\006\135\007\132\010\131\011\136\022\155\025\133" +
    "\043\140\001\002\000\004\023\153\001\002\000\004\023" +
    "\151\001\002\000\004\023\147\001\002\000\004\023\145" +
    "\001\002\000\004\023\143\001\002\000\024\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\022\uffee\025\uffee" +
    "\043\uffee\001\002\000\006\042\044\044\043\001\002\000" +
    "\024\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\022\uffea\025\uffea\043\uffea\001\002\000\006\042\044\044" +
    "\043\001\002\000\024\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\022\uffed\025\uffed\043\uffed\001\002\000" +
    "\006\042\044\044\043\001\002\000\024\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\022\uffeb\025\uffeb\043" +
    "\uffeb\001\002\000\006\042\044\044\043\001\002\000\024" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\022" +
    "\uffe6\025\uffe6\043\uffe6\001\002\000\006\042\044\044\043" +
    "\001\002\000\024\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\022\uffe9\025\uffe9\043\uffe9\001\002\000\004" +
    "\021\ufff5\001\002\000\024\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\022\uffef\025\uffef\043\uffef\001\002" +
    "\000\006\042\044\044\043\001\002\000\024\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\022\uffe8\025\uffe8" +
    "\043\uffe8\001\002\000\006\042\044\044\043\001\002\000" +
    "\024\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\022\uffe7\025\uffe7\043\uffe7\001\002\000\006\003\004\020" +
    "\006\001\002\000\004\020\165\001\002\000\022\012\017" +
    "\013\020\014\014\015\013\016\015\017\016\022\166\043" +
    "\011\001\002\000\004\015\167\001\002\000\004\021\ufff8" +
    "\001\002\000\006\002\ufffe\020\ufffe\001\002\000\004\023" +
    "\172\001\002\000\004\042\173\001\002\000\004\026\174" +
    "\001\002\000\004\022\175\001\002\000\004\021\ufff4\001" +
    "\002\000\020\012\017\013\020\014\014\015\013\016\015" +
    "\017\016\043\011\001\002\000\006\002\ufffd\020\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\002\006\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\073\007\070\011" +
    "\072\014\065\001\001\000\006\006\022\011\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\032\001\001\000\002\001\001\000\004\010\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\102\014\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\076\011" +
    "\077\014\065\001\001\000\002\001\001\000\004\014\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\106\001\001\000\002\001" +
    "\001\000\004\003\110\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\133\013\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\143\001\001\000\002\001" +
    "\001\000\004\015\145\001\001\000\002\001\001\000\004" +
    "\015\147\001\001\000\002\001\001\000\004\015\151\001" +
    "\001\000\002\001\001\000\004\015\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\157\001\001\000\002\001\001\000\004\015\161\001\001" +
    "\000\002\001\001\000\004\003\163\001\001\000\002\001" +
    "\001\000\004\010\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\035\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        Inicio.lisErrores.add("Error de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+" Se esperaba otro token\n");       
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de usuario
    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ORIENTACION ::= IDE 
            {
              String RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String iden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=iden;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIENTACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ORIENTACION ::= II 
            {
              String RESULT =null;
		int iinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String iin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=iin;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIENTACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ORIENTACION ::= CD 
            {
              String RESULT =null;
		int cdnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cdn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=cdn;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIENTACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ORIENTACION ::= CI 
            {
              String RESULT =null;
		int cinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=cin;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIENTACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ORIENTACION ::= SD 
            {
              String RESULT =null;
		int sdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sde = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=sde;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIENTACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ORIENTACION ::= SI 
            {
              String RESULT =null;
		int sidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=sid;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIENTACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALUE ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALUE ::= ENTERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=num;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATRIBUTO ::= error ORIENTACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ATRIBUTO ::= ORIENTACION DOSP ID IGUAL VALUE 
            {
              Object RESULT =null;
		int orileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oriright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ori = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Inicio.lisEncabezado.add(new Encabezado(ori,dato,cont));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESTILOENCABEZADO ::= ID IGUAL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESTILOENCABEZADO ::= CNR IGUAL ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        if(ide.equalsIgnoreCase("true"))Inicio.reprobado=true;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESTILOENCABEZADO ::= CNA IGUAL ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        if(ide.equalsIgnoreCase("true"))Inicio.aprobado=true;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTILOENCABEZADO ::= CN IGUAL VALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTILOENCABEZADO ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTILOENCABEZADO ::= ID IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    Encabezado.logo=cont;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTILOENCABEZADO ::= CV IGUAL VALUE 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                           Encabezado.estiloContenido=cont;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTILOENCABEZADO ::= CT IGUAL VALUE 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                           Encabezado.estiloDato=cont;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOENCABEZADO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAENCABEZADO ::= error ATRIBUTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAENCABEZADO ::= ESTILOENCABEZADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAENCABEZADO ::= ATRIBUTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAENCABEZADO ::= SENTENCIAENCABEZADO ESTILOENCABEZADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAENCABEZADO ::= SENTENCIAENCABEZADO ATRIBUTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTOESTUDIANTE ::= PRO IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).addPro(valu);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUTOESTUDIANTE ::= PRA IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).addPra(valu);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTOESTUDIANTE ::= EC IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).addEC(valu);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUTOESTUDIANTE ::= HT IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).addHT(valu);
        
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUTOESTUDIANTE ::= TAREA IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).addTarea(valu);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIBUTOESTUDIANTE ::= FINA IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).setFina(Integer.parseInt(valu));
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUTOESTUDIANTE ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIBUTOESTUDIANTE ::= ID IGUAL VALUE 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                if(dato.equalsIgnoreCase("Carnet"))
                                                    Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).setCarne(valu);
                                                else if(dato.equalsIgnoreCase("Nombres"))
                                                    Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).setApellido(valu);
                                                else if(dato.equalsIgnoreCase("Apellidos"))
                                                    Inicio.lisEstudiante.get(Inicio.lisEstudiante.size()-1).setNombre(valu);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOESTUDIANTE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAESTUDIANTE ::= ATRIBUTOESTUDIANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAESTUDIANTE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAESTUDIANTE ::= SENTENCIAESTUDIANTE ATRIBUTOESTUDIANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAESTUDIANTE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTILOCUERPO ::= ESTILOENCABEZADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTILOCUERPO ::= ESTILOCUERPO ESTILOENCABEZADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOCUERPO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SEREPO ::= ID IGUAL ID 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        if(dato.equalsIgnoreCase("ra")&& valu.equalsIgnoreCase("true"))
                                            Inicio.ra=true;
                                        if(dato.equalsIgnoreCase("rr")&& valu.equalsIgnoreCase("true"))
                                            Inicio.rr=true;
                                        if(dato.equalsIgnoreCase("re")&& valu.equalsIgnoreCase("true"))
                                            Inicio.re=true;
                                        if(dato.equalsIgnoreCase("rp")&& valu.equalsIgnoreCase("true"))
                                            Inicio.rp=true;

                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEREPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SEREPO ::= SEREPO ID IGUAL ID 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        if(dato.equalsIgnoreCase("ra")&& valu.equalsIgnoreCase("true"))
                                            Inicio.ra=true;
                                        if(dato.equalsIgnoreCase("rr")&& valu.equalsIgnoreCase("true"))
                                            Inicio.rr=true;
                                        if(dato.equalsIgnoreCase("re")&& valu.equalsIgnoreCase("true"))
                                            Inicio.re=true;
                                        if(dato.equalsIgnoreCase("rp")&& valu.equalsIgnoreCase("true"))
                                            Inicio.rp=true;
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEREPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAINTERIOR ::= ID ID IGUAL ENTERO PORCE DIAG 
            {
              Object RESULT =null;
		int actividadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int actividadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String actividad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int porcentajeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int porcentajeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String porcentaje = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                                                            if(actividad.equalsIgnoreCase("Tareas"))
                                                                                Inicio.Tareas=Integer.parseInt(porcentaje);
                                                                            else if(actividad.equalsIgnoreCase("Hojas_de_trabajo"))
                                                                                Inicio.Hojas=Integer.parseInt(porcentaje);
                                                                            else if(actividad.equalsIgnoreCase("Examenes_cortos"))
                                                                                Inicio.ExamenCorto=Integer.parseInt(porcentaje);
                                                                            else if(actividad.equalsIgnoreCase("Practicas"))
                                                                                Inicio.Practicas=Integer.parseInt(porcentaje);
                                                                            else if(actividad.equalsIgnoreCase("Proyectos"))
                                                                                Inicio.Proyectos=Integer.parseInt(porcentaje);
                                                                            else if(actividad.equalsIgnoreCase("Examen_Final"))
                                                                                Inicio.Final=Integer.parseInt(porcentaje);
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAINTERIOR ::= ESTUD NT$0 SENTENCIAESTUDIANTE DIAG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;

                                Inicio.lisEstudiante.add(new Estudiante());
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAINTERIOR ::= REPOR ETI_C SEREPO ETI_A DIAG REPOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAINTERIOR ::= POND ETI_C S ETI_A DIAG POND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAINTERIOR ::= CUERP ESTILOCUERPO DIAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAINTERIOR ::= CUERP ETI_C S ETI_A DIAG CUERP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAINTERIOR ::= ESTIL ETI_C S ETI_A DIAG ESTIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAINTERIOR ::= ENCAB SENTENCIAENCABEZADO DIAG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAINTERIOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= error ETI_A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= ETI_A SENTENCIAINTERIOR ETI_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S ETI_A SENTENCIAINTERIOR ETI_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

